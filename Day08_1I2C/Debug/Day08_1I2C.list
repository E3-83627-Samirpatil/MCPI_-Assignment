
Day08_1I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08001cbc  08001cbc  00002cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e84  08001e84  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001e84  08001e84  00002e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e8c  08001e8c  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e8c  08001e8c  00002e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e90  08001e90  00002e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001e94  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000150a  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000709  00000000  00000000  00004588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fb  00000000  00000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194df  00000000  00000000  00004f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002027  00000000  00000000  0001e3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be37  00000000  00000000  00020411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac248  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c68  00000000  00000000  000ac28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000acef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  000acf13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001ca4 	.word	0x08001ca4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001ca4 	.word	0x08001ca4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EEPROM_init>:
 */

#include "EEROM.h"

void EEPROM_init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	uint8_t RET;
	I2CInit();
 8000286:	f000 f943 	bl	8000510 <I2CInit>
	I2CStart();
 800028a:	f000 f89d 	bl	80003c8 <I2CStart>
	RET = I2CIsDeviceReady(EEPROM_W);
 800028e:	20a0      	movs	r0, #160	@ 0xa0
 8000290:	f000 f920 	bl	80004d4 <I2CIsDeviceReady>
 8000294:	4603      	mov	r3, r0
 8000296:	71fb      	strb	r3, [r7, #7]
	I2CStop();
 8000298:	f000 f8b2 	bl	8000400 <I2CStop>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <EEPROM_write>:
void EEPROM_write(uint16_t addr , uint8_t byte[], uint8_t n)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	80fb      	strh	r3, [r7, #6]
 80002b0:	4613      	mov	r3, r2
 80002b2:	717b      	strb	r3, [r7, #5]
	uint8_t HIGH = addr >> 8, LOW = addr & 0XFF;
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	0a1b      	lsrs	r3, r3, #8
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	72fb      	strb	r3, [r7, #11]
 80002bc:	88fb      	ldrh	r3, [r7, #6]
 80002be:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 80002c0:	f000 f882 	bl	80003c8 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 80002c4:	20a0      	movs	r0, #160	@ 0xa0
 80002c6:	f000 f8b1 	bl	800042c <I2CSendSlaveAddress>
	I2CSendData(HIGH);
 80002ca:	7afb      	ldrb	r3, [r7, #11]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f8c7 	bl	8000460 <I2CSendData>
	I2CSendData(LOW);
 80002d2:	7abb      	ldrb	r3, [r7, #10]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 f8c3 	bl	8000460 <I2CSendData>
	for(int i=0;i<n;i++)
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e009      	b.n	80002f4 <EEPROM_write+0x50>
	I2CSendData(byte[i]);
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	683a      	ldr	r2, [r7, #0]
 80002e4:	4413      	add	r3, r2
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f8b9 	bl	8000460 <I2CSendData>
	for(int i=0;i<n;i++)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	3301      	adds	r3, #1
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	797b      	ldrb	r3, [r7, #5]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	dbf1      	blt.n	80002e0 <EEPROM_write+0x3c>
	I2CStop();
 80002fc:	f000 f880 	bl	8000400 <I2CStop>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <EEPROM_read>:
void EEPROM_read(uint16_t addr , uint8_t byte[], uint8_t n)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	6039      	str	r1, [r7, #0]
 8000312:	80fb      	strh	r3, [r7, #6]
 8000314:	4613      	mov	r3, r2
 8000316:	717b      	strb	r3, [r7, #5]
	uint8_t HIGH = addr >> 8, LOW = addr & 0XFF;
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	0a1b      	lsrs	r3, r3, #8
 800031c:	b29b      	uxth	r3, r3
 800031e:	72fb      	strb	r3, [r7, #11]
 8000320:	88fb      	ldrh	r3, [r7, #6]
 8000322:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000324:	f000 f850 	bl	80003c8 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 8000328:	20a0      	movs	r0, #160	@ 0xa0
 800032a:	f000 f87f 	bl	800042c <I2CSendSlaveAddress>
	I2CSendData(HIGH);
 800032e:	7afb      	ldrb	r3, [r7, #11]
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f895 	bl	8000460 <I2CSendData>
	I2CSendData(LOW);
 8000336:	7abb      	ldrb	r3, [r7, #10]
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f891 	bl	8000460 <I2CSendData>
	I2CRepeatStart();
 800033e:	f000 f859 	bl	80003f4 <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000342:	20a1      	movs	r0, #161	@ 0xa1
 8000344:	f000 f872 	bl	800042c <I2CSendSlaveAddress>
	for(int i=0;i<n;i++)
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e009      	b.n	8000362 <EEPROM_read+0x5a>
		byte[i] = I2CRecvDataAck();
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	683a      	ldr	r2, [r7, #0]
 8000352:	18d4      	adds	r4, r2, r3
 8000354:	f000 f8a2 	bl	800049c <I2CRecvDataAck>
 8000358:	4603      	mov	r3, r0
 800035a:	7023      	strb	r3, [r4, #0]
	for(int i=0;i<n;i++)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	3301      	adds	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	797b      	ldrb	r3, [r7, #5]
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	429a      	cmp	r2, r3
 8000368:	dbf1      	blt.n	800034e <EEPROM_read+0x46>
	I2CStop();
 800036a:	f000 f849 	bl	8000400 <I2CStop>
}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	bd90      	pop	{r4, r7, pc}
	...

08000378 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <DelayMs+0x44>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000386:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <DelayMs+0x48>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0e      	ldr	r2, [pc, #56]	@ (80003c4 <DelayMs+0x4c>)
 800038c:	fba2 2303 	umull	r2, r3, r2, r3
 8000390:	099b      	lsrs	r3, r3, #6
 8000392:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800039e:	bf00      	nop
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <DelayMs+0x44>)
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	1ad2      	subs	r2, r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d3f8      	bcc.n	80003a0 <DelayMs+0x28>
}
 80003ae:	bf00      	nop
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e0001000 	.word	0xe0001000
 80003c0:	20000000 	.word	0x20000000
 80003c4:	10624dd3 	.word	0x10624dd3

080003c8 <I2CStart>:

#include "I2C.h"

void I2CStart() {
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80003cc:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <I2CStart+0x28>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a07      	ldr	r2, [pc, #28]	@ (80003f0 <I2CStart+0x28>)
 80003d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003d6:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80003d8:	bf00      	nop
 80003da:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <I2CStart+0x28>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0f9      	beq.n	80003da <I2CStart+0x12>
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40005400 	.word	0x40005400

080003f4 <I2CRepeatStart>:

void I2CRepeatStart() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	I2CStart();
 80003f8:	f7ff ffe6 	bl	80003c8 <I2CStart>
}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}

08000400 <I2CStop>:

void I2CStop() {
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000404:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <I2CStop+0x28>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a07      	ldr	r2, [pc, #28]	@ (8000428 <I2CStop+0x28>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800040e:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000410:	bf00      	nop
 8000412:	4b05      	ldr	r3, [pc, #20]	@ (8000428 <I2CStop+0x28>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f9      	beq.n	8000412 <I2CStop+0x12>
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40005400 	.word	0x40005400

0800042c <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 8000436:	4a09      	ldr	r2, [pc, #36]	@ (800045c <I2CSendSlaveAddress+0x30>)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800043c:	bf00      	nop
 800043e:	4b07      	ldr	r3, [pc, #28]	@ (800045c <I2CSendSlaveAddress+0x30>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f003 0302 	and.w	r3, r3, #2
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0f9      	beq.n	800043e <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 800044a:	4b04      	ldr	r3, [pc, #16]	@ (800045c <I2CSendSlaveAddress+0x30>)
 800044c:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 800044e:	4b03      	ldr	r3, [pc, #12]	@ (800045c <I2CSendSlaveAddress+0x30>)
 8000450:	699b      	ldr	r3, [r3, #24]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40005400 	.word	0x40005400

08000460 <I2CSendData>:

void I2CSendData(uint8_t val) {
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 800046a:	bf00      	nop
 800046c:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <I2CSendData+0x38>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f9      	beq.n	800046c <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 8000478:	4a07      	ldr	r2, [pc, #28]	@ (8000498 <I2CSendData+0x38>)
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800047e:	bf00      	nop
 8000480:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <I2CSendData+0x38>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <I2CSendData+0x20>
}
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40005400 	.word	0x40005400

0800049c <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void) {
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <I2CRecvDataAck+0x34>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <I2CRecvDataAck+0x34>)
 80004a8:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80004ac:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80004ae:	bf00      	nop
 80004b0:	4b07      	ldr	r3, [pc, #28]	@ (80004d0 <I2CRecvDataAck+0x34>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f9      	beq.n	80004b0 <I2CRecvDataAck+0x14>
	// read content and clear flags
	val = (uint8_t)I2C1->DR;
 80004bc:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <I2CRecvDataAck+0x34>)
 80004be:	691b      	ldr	r3, [r3, #16]
 80004c0:	71fb      	strb	r3, [r7, #7]
	return val;
 80004c2:	79fb      	ldrb	r3, [r7, #7]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40005400 	.word	0x40005400

080004d4 <I2CIsDeviceReady>:
	// read content and clear flags
	val = I2C1->DR;
	return val;
}

int I2CIsDeviceReady(uint8_t slaveaddr) {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f023 0301 	bic.w	r3, r3, #1
 80004e4:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 80004e6:	4a09      	ldr	r2, [pc, #36]	@ (800050c <I2CIsDeviceReady+0x38>)
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80004ec:	bf00      	nop
 80004ee:	4b07      	ldr	r3, [pc, #28]	@ (800050c <I2CIsDeviceReady+0x38>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 80004fa:	4b04      	ldr	r3, [pc, #16]	@ (800050c <I2CIsDeviceReady+0x38>)
 80004fc:	699b      	ldr	r3, [r3, #24]
	return 1;
 80004fe:	2301      	movs	r3, #1
}
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40005400 	.word	0x40005400

08000510 <I2CInit>:

void I2CInit() {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000514:	4b43      	ldr	r3, [pc, #268]	@ (8000624 <I2CInit+0x114>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000518:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <I2CInit+0x114>)
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000520:	2032      	movs	r0, #50	@ 0x32
 8000522:	f7ff ff29 	bl	8000378 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000526:	4b3f      	ldr	r3, [pc, #252]	@ (8000624 <I2CInit+0x114>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a3e      	ldr	r2, [pc, #248]	@ (8000624 <I2CInit+0x114>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 8000532:	4b3d      	ldr	r3, [pc, #244]	@ (8000628 <I2CInit+0x118>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a3c      	ldr	r2, [pc, #240]	@ (8000628 <I2CInit+0x118>)
 8000538:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800053c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 800053e:	4b3a      	ldr	r3, [pc, #232]	@ (8000628 <I2CInit+0x118>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a39      	ldr	r2, [pc, #228]	@ (8000628 <I2CInit+0x118>)
 8000544:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000548:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 800054a:	4b37      	ldr	r3, [pc, #220]	@ (8000628 <I2CInit+0x118>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	4a36      	ldr	r2, [pc, #216]	@ (8000628 <I2CInit+0x118>)
 8000550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000554:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 8000556:	4b34      	ldr	r3, [pc, #208]	@ (8000628 <I2CInit+0x118>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	4a33      	ldr	r2, [pc, #204]	@ (8000628 <I2CInit+0x118>)
 800055c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000560:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 8000562:	4b31      	ldr	r3, [pc, #196]	@ (8000628 <I2CInit+0x118>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a30      	ldr	r2, [pc, #192]	@ (8000628 <I2CInit+0x118>)
 8000568:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800056c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 800056e:	4b2e      	ldr	r3, [pc, #184]	@ (8000628 <I2CInit+0x118>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2d      	ldr	r2, [pc, #180]	@ (8000628 <I2CInit+0x118>)
 8000574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000578:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 800057a:	4b2b      	ldr	r3, [pc, #172]	@ (8000628 <I2CInit+0x118>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	4a2a      	ldr	r2, [pc, #168]	@ (8000628 <I2CInit+0x118>)
 8000580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000584:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 8000586:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <I2CInit+0x118>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <I2CInit+0x118>)
 800058c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000590:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 8000592:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <I2CInit+0x118>)
 8000594:	6a1b      	ldr	r3, [r3, #32]
 8000596:	4a24      	ldr	r2, [pc, #144]	@ (8000628 <I2CInit+0x118>)
 8000598:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800059c:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 800059e:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <I2CInit+0x118>)
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <I2CInit+0x118>)
 80005a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80005a8:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <I2CInit+0x114>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000624 <I2CInit+0x114>)
 80005b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b4:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 80005b6:	2032      	movs	r0, #50	@ 0x32
 80005b8:	f7ff fede 	bl	8000378 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <I2CInit+0x11c>)
 80005be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005c2:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 80005c4:	4b19      	ldr	r3, [pc, #100]	@ (800062c <I2CInit+0x11c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 80005ca:	4b18      	ldr	r3, [pc, #96]	@ (800062c <I2CInit+0x11c>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	4a17      	ldr	r2, [pc, #92]	@ (800062c <I2CInit+0x11c>)
 80005d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80005d4:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 80005d6:	4b15      	ldr	r3, [pc, #84]	@ (800062c <I2CInit+0x11c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a14      	ldr	r2, [pc, #80]	@ (800062c <I2CInit+0x11c>)
 80005dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80005e0:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <I2CInit+0x11c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a11      	ldr	r2, [pc, #68]	@ (800062c <I2CInit+0x11c>)
 80005e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005ec:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <I2CInit+0x11c>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	@ (800062c <I2CInit+0x11c>)
 80005f4:	f043 0310 	orr.w	r3, r3, #16
 80005f8:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 80005fa:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <I2CInit+0x11c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <I2CInit+0x11c>)
 8000600:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000604:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <I2CInit+0x11c>)
 8000608:	6a1b      	ldr	r3, [r3, #32]
 800060a:	4a08      	ldr	r2, [pc, #32]	@ (800062c <I2CInit+0x11c>)
 800060c:	f043 0311 	orr.w	r3, r3, #17
 8000610:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <I2CInit+0x11c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <I2CInit+0x11c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40020400 	.word	0x40020400
 800062c:	40005400 	.word	0x40005400

08000630 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
//	char str[32] = "!HELLO!";

	SystemInit();
 8000636:	f000 f8b3 	bl	80007a0 <SystemInit>
	EEPROM_init();
 800063a:	f7ff fe21 	bl	8000280 <EEPROM_init>
	UartInit(BAUD_9600);
 800063e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000642:	f000 f8e3 	bl	800080c <UartInit>
	char str[70] = "!HELLO!";
 8000646:	4a35      	ldr	r2, [pc, #212]	@ (800071c <main+0xec>)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	6810      	ldr	r0, [r2, #0]
 800064e:	6851      	ldr	r1, [r2, #4]
 8000650:	c303      	stmia	r3!, {r0, r1}
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	223e      	movs	r2, #62	@ 0x3e
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fa28 	bl	8000ab0 <memset>
	int ch ;

	do
	{
		sprintf(str,"Enter the choice :- \r\n1.Data Write on EEPROM\r\n2.Data Read from EEPROM\n:");
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	492e      	ldr	r1, [pc, #184]	@ (8000720 <main+0xf0>)
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f9d6 	bl	8000a18 <siprintf>
		UartPuts(str);
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f965 	bl	8000940 <UartPuts>

		sscanf(str,"%d",&ch);
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4929      	ldr	r1, [pc, #164]	@ (8000724 <main+0xf4>)
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f9ea 	bl	8000a58 <siscanf>
		UartGets(str);
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f975 	bl	8000978 <UartGets>
		//UartPuts("Enter the string :  \r\n");

		switch(ch)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d002      	beq.n	800069a <main+0x6a>
 8000694:	2b02      	cmp	r3, #2
 8000696:	d020      	beq.n	80006da <main+0xaa>
 8000698:	e037      	b.n	800070a <main+0xda>
		{
			case 1 :
				sprintf(str,"Enter string\n");
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4922      	ldr	r1, [pc, #136]	@ (8000728 <main+0xf8>)
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f9b9 	bl	8000a18 <siprintf>
				UartPuts(str);
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f948 	bl	8000940 <UartPuts>
				UartGets(str);
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f95f 	bl	8000978 <UartGets>
				sscanf(str,"%s",str);
 80006ba:	f107 0208 	add.w	r2, r7, #8
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	491a      	ldr	r1, [pc, #104]	@ (800072c <main+0xfc>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f9c7 	bl	8000a58 <siscanf>
				EEPROM_write(0X0020,(uint8_t*)str,12);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	220c      	movs	r2, #12
 80006d0:	4619      	mov	r1, r3
 80006d2:	2020      	movs	r0, #32
 80006d4:	f7ff fde6 	bl	80002a4 <EEPROM_write>
				break;
 80006d8:	e017      	b.n	800070a <main+0xda>

			case 2 :
				EEPROM_read(0X0020,(uint8_t*)str,12);
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	220c      	movs	r2, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	2020      	movs	r0, #32
 80006e4:	f7ff fe10 	bl	8000308 <EEPROM_read>
				UartPuts(str);
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f927 	bl	8000940 <UartPuts>
				sprintf(str,"\n\r");
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	490e      	ldr	r1, [pc, #56]	@ (8000730 <main+0x100>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f98d 	bl	8000a18 <siprintf>
				UartPuts(str);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f91c 	bl	8000940 <UartPuts>
				break;
 8000708:	bf00      	nop
		}
	}while(ch != 0);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1a7      	bne.n	8000660 <main+0x30>

	return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	08001d20 	.word	0x08001d20
 8000720:	08001cbc 	.word	0x08001cbc
 8000724:	08001d04 	.word	0x08001d04
 8000728:	08001d08 	.word	0x08001d08
 800072c:	08001d18 	.word	0x08001d18
 8000730:	08001d1c 	.word	0x08001d1c

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f000 f9ac 	bl	8000ac0 <__errno>
 8000768:	4603      	mov	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20020000 	.word	0x20020000
 8000794:	00000400 	.word	0x00000400
 8000798:	20000070 	.word	0x20000070
 800079c:	200001c0 	.word	0x200001c0

080007a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  DWT_Init();
 80007a4:	f000 f802 	bl	80007ac <DWT_Init>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <DWT_Init+0x58>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <DWT_Init+0x58>)
 80007b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80007ba:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <DWT_Init+0x58>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <DWT_Init+0x58>)
 80007c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007c6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <DWT_Init+0x5c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <DWT_Init+0x5c>)
 80007ce:	f023 0301 	bic.w	r3, r3, #1
 80007d2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <DWT_Init+0x5c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <DWT_Init+0x5c>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <DWT_Init+0x5c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80007e6:	bf00      	nop
    __ASM volatile ("NOP");
 80007e8:	bf00      	nop
    __ASM volatile ("NOP");
 80007ea:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <DWT_Init+0x5c>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000edf0 	.word	0xe000edf0
 8000808:	e0001000 	.word	0xe0001000

0800080c <UartInit>:
#define TX_PIN			2
#define RX_PIN			3
#define USART_ALT_FN	7

void UartInit(uint32_t baud)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000814:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <UartInit+0xd0>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000818:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <UartInit+0xd0>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000820:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <UartInit+0xd4>)
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	4a2e      	ldr	r2, [pc, #184]	@ (80008e0 <UartInit+0xd4>)
 8000826:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800082a:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <UartInit+0xd4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a2b      	ldr	r2, [pc, #172]	@ (80008e0 <UartInit+0xd4>)
 8000832:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000836:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <UartInit+0xd4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a28      	ldr	r2, [pc, #160]	@ (80008e0 <UartInit+0xd4>)
 800083e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000842:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000844:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <UartInit+0xd4>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	4a25      	ldr	r2, [pc, #148]	@ (80008e0 <UartInit+0xd4>)
 800084a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800084e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000850:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <UartInit+0xd4>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	4a22      	ldr	r2, [pc, #136]	@ (80008e0 <UartInit+0xd4>)
 8000856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800085a:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 800085c:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <UartInit+0xd4>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4a1f      	ldr	r2, [pc, #124]	@ (80008e0 <UartInit+0xd4>)
 8000862:	f023 030c 	bic.w	r3, r3, #12
 8000866:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000868:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <UartInit+0xd0>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <UartInit+0xd0>)
 800086e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <UartInit+0xd8>)
 8000876:	220c      	movs	r2, #12
 8000878:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <UartInit+0xd8>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <UartInit+0xd8>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800088c:	d016      	beq.n	80008bc <UartInit+0xb0>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000894:	d816      	bhi.n	80008c4 <UartInit+0xb8>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 800089c:	d004      	beq.n	80008a8 <UartInit+0x9c>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80008a4:	d005      	beq.n	80008b2 <UartInit+0xa6>
 80008a6:	e00d      	b.n	80008c4 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <UartInit+0xd8>)
 80008aa:	f240 6283 	movw	r2, #1667	@ 0x683
 80008ae:	609a      	str	r2, [r3, #8]
			break;
 80008b0:	e008      	b.n	80008c4 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <UartInit+0xd8>)
 80008b4:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80008b8:	609a      	str	r2, [r3, #8]
			break;
 80008ba:	e003      	b.n	80008c4 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <UartInit+0xd8>)
 80008be:	228b      	movs	r2, #139	@ 0x8b
 80008c0:	609a      	str	r2, [r3, #8]
			break;
 80008c2:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <UartInit+0xd8>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4a06      	ldr	r2, [pc, #24]	@ (80008e4 <UartInit+0xd8>)
 80008ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40004400 	.word	0x40004400

080008e8 <UartPutch>:

void UartPutch(uint8_t ch)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 80008f2:	bf00      	nop
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <UartPutch+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0f9      	beq.n	80008f4 <UartPutch+0xc>
		;
	// write new byte in TDRb
	USART2->DR = ch;
 8000900:	4a03      	ldr	r2, [pc, #12]	@ (8000910 <UartPutch+0x28>)
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	6053      	str	r3, [r2, #4]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40004400 	.word	0x40004400

08000914 <UartGetch>:

uint8_t UartGetch(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800091a:	bf00      	nop
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <UartGetch+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0320 	and.w	r3, r3, #32
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0f9      	beq.n	800091c <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <UartGetch+0x28>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	71fb      	strb	r3, [r7, #7]
	return ch;
 800092e:	79fb      	ldrb	r3, [r7, #7]
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40004400 	.word	0x40004400

08000940 <UartPuts>:

void UartPuts(char str[])
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	e009      	b.n	8000962 <UartPuts+0x22>
		UartPutch(str[i]);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ffc6 	bl	80008e8 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1ef      	bne.n	800094e <UartPuts+0xe>
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <UartGets>:

void UartGets(char str[])
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	int i=0;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 8000984:	f7ff ffc6 	bl	8000914 <UartGetch>
 8000988:	4603      	mov	r3, r0
 800098a:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	7afa      	ldrb	r2, [r7, #11]
 8000994:	701a      	strb	r2, [r3, #0]
		i++;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3301      	adds	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	2b0d      	cmp	r3, #13
 80009a0:	d1f0      	bne.n	8000984 <UartGets+0xc>
	str[i] = '\n';
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	220a      	movs	r2, #10
 80009aa:	701a      	strb	r2, [r3, #0]
	i++;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4413      	add	r3, r2
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c4:	480d      	ldr	r0, [pc, #52]	@ (80009fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c8:	f7ff feea 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f2:	f000 f86b 	bl	8000acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fe1b 	bl	8000630 <main>

080009fa <LoopForever>:

LoopForever:
  b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   r0, =_estack
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a08:	08001e94 	.word	0x08001e94
  ldr r2, =_sbss
 8000a0c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a10:	200001bc 	.word	0x200001bc

08000a14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <siprintf>:
 8000a18:	b40e      	push	{r1, r2, r3}
 8000a1a:	b500      	push	{lr}
 8000a1c:	b09c      	sub	sp, #112	@ 0x70
 8000a1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000a20:	9002      	str	r0, [sp, #8]
 8000a22:	9006      	str	r0, [sp, #24]
 8000a24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <siprintf+0x38>)
 8000a2a:	9107      	str	r1, [sp, #28]
 8000a2c:	9104      	str	r1, [sp, #16]
 8000a2e:	4909      	ldr	r1, [pc, #36]	@ (8000a54 <siprintf+0x3c>)
 8000a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a34:	9105      	str	r1, [sp, #20]
 8000a36:	6800      	ldr	r0, [r0, #0]
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	a902      	add	r1, sp, #8
 8000a3c:	f000 f9c0 	bl	8000dc0 <_svfiprintf_r>
 8000a40:	9b02      	ldr	r3, [sp, #8]
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	b01c      	add	sp, #112	@ 0x70
 8000a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a4c:	b003      	add	sp, #12
 8000a4e:	4770      	bx	lr
 8000a50:	20000004 	.word	0x20000004
 8000a54:	ffff0208 	.word	0xffff0208

08000a58 <siscanf>:
 8000a58:	b40e      	push	{r1, r2, r3}
 8000a5a:	b530      	push	{r4, r5, lr}
 8000a5c:	b09c      	sub	sp, #112	@ 0x70
 8000a5e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000a60:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000a64:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a6c:	9002      	str	r0, [sp, #8]
 8000a6e:	9006      	str	r0, [sp, #24]
 8000a70:	f7ff fbae 	bl	80001d0 <strlen>
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <siscanf+0x4c>)
 8000a76:	9003      	str	r0, [sp, #12]
 8000a78:	9007      	str	r0, [sp, #28]
 8000a7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a7c:	480a      	ldr	r0, [pc, #40]	@ (8000aa8 <siscanf+0x50>)
 8000a7e:	9401      	str	r4, [sp, #4]
 8000a80:	2300      	movs	r3, #0
 8000a82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a84:	9314      	str	r3, [sp, #80]	@ 0x50
 8000a86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a8e:	462a      	mov	r2, r5
 8000a90:	4623      	mov	r3, r4
 8000a92:	a902      	add	r1, sp, #8
 8000a94:	6800      	ldr	r0, [r0, #0]
 8000a96:	f000 fae7 	bl	8001068 <__ssvfiscanf_r>
 8000a9a:	b01c      	add	sp, #112	@ 0x70
 8000a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000aa0:	b003      	add	sp, #12
 8000aa2:	4770      	bx	lr
 8000aa4:	08000aad 	.word	0x08000aad
 8000aa8:	20000004 	.word	0x20000004

08000aac <__seofread>:
 8000aac:	2000      	movs	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <memset>:
 8000ab0:	4402      	add	r2, r0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d100      	bne.n	8000aba <memset+0xa>
 8000ab8:	4770      	bx	lr
 8000aba:	f803 1b01 	strb.w	r1, [r3], #1
 8000abe:	e7f9      	b.n	8000ab4 <memset+0x4>

08000ac0 <__errno>:
 8000ac0:	4b01      	ldr	r3, [pc, #4]	@ (8000ac8 <__errno+0x8>)
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000004 	.word	0x20000004

08000acc <__libc_init_array>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	4d0d      	ldr	r5, [pc, #52]	@ (8000b04 <__libc_init_array+0x38>)
 8000ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8000b08 <__libc_init_array+0x3c>)
 8000ad2:	1b64      	subs	r4, r4, r5
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	42a6      	cmp	r6, r4
 8000ada:	d109      	bne.n	8000af0 <__libc_init_array+0x24>
 8000adc:	4d0b      	ldr	r5, [pc, #44]	@ (8000b0c <__libc_init_array+0x40>)
 8000ade:	4c0c      	ldr	r4, [pc, #48]	@ (8000b10 <__libc_init_array+0x44>)
 8000ae0:	f001 f8e0 	bl	8001ca4 <_init>
 8000ae4:	1b64      	subs	r4, r4, r5
 8000ae6:	10a4      	asrs	r4, r4, #2
 8000ae8:	2600      	movs	r6, #0
 8000aea:	42a6      	cmp	r6, r4
 8000aec:	d105      	bne.n	8000afa <__libc_init_array+0x2e>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af4:	4798      	blx	r3
 8000af6:	3601      	adds	r6, #1
 8000af8:	e7ee      	b.n	8000ad8 <__libc_init_array+0xc>
 8000afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afe:	4798      	blx	r3
 8000b00:	3601      	adds	r6, #1
 8000b02:	e7f2      	b.n	8000aea <__libc_init_array+0x1e>
 8000b04:	08001e8c 	.word	0x08001e8c
 8000b08:	08001e8c 	.word	0x08001e8c
 8000b0c:	08001e8c 	.word	0x08001e8c
 8000b10:	08001e90 	.word	0x08001e90

08000b14 <__retarget_lock_acquire_recursive>:
 8000b14:	4770      	bx	lr

08000b16 <__retarget_lock_release_recursive>:
 8000b16:	4770      	bx	lr

08000b18 <_free_r>:
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d041      	beq.n	8000ba4 <_free_r+0x8c>
 8000b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b24:	1f0c      	subs	r4, r1, #4
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bfb8      	it	lt
 8000b2a:	18e4      	addlt	r4, r4, r3
 8000b2c:	f000 f8e0 	bl	8000cf0 <__malloc_lock>
 8000b30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba8 <_free_r+0x90>)
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	b933      	cbnz	r3, 8000b44 <_free_r+0x2c>
 8000b36:	6063      	str	r3, [r4, #4]
 8000b38:	6014      	str	r4, [r2, #0]
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b40:	f000 b8dc 	b.w	8000cfc <__malloc_unlock>
 8000b44:	42a3      	cmp	r3, r4
 8000b46:	d908      	bls.n	8000b5a <_free_r+0x42>
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	1821      	adds	r1, r4, r0
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	bf01      	itttt	eq
 8000b50:	6819      	ldreq	r1, [r3, #0]
 8000b52:	685b      	ldreq	r3, [r3, #4]
 8000b54:	1809      	addeq	r1, r1, r0
 8000b56:	6021      	streq	r1, [r4, #0]
 8000b58:	e7ed      	b.n	8000b36 <_free_r+0x1e>
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	b10b      	cbz	r3, 8000b64 <_free_r+0x4c>
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	d9fa      	bls.n	8000b5a <_free_r+0x42>
 8000b64:	6811      	ldr	r1, [r2, #0]
 8000b66:	1850      	adds	r0, r2, r1
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d10b      	bne.n	8000b84 <_free_r+0x6c>
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	4401      	add	r1, r0
 8000b70:	1850      	adds	r0, r2, r1
 8000b72:	4283      	cmp	r3, r0
 8000b74:	6011      	str	r1, [r2, #0]
 8000b76:	d1e0      	bne.n	8000b3a <_free_r+0x22>
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	6053      	str	r3, [r2, #4]
 8000b7e:	4408      	add	r0, r1
 8000b80:	6010      	str	r0, [r2, #0]
 8000b82:	e7da      	b.n	8000b3a <_free_r+0x22>
 8000b84:	d902      	bls.n	8000b8c <_free_r+0x74>
 8000b86:	230c      	movs	r3, #12
 8000b88:	602b      	str	r3, [r5, #0]
 8000b8a:	e7d6      	b.n	8000b3a <_free_r+0x22>
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	1821      	adds	r1, r4, r0
 8000b90:	428b      	cmp	r3, r1
 8000b92:	bf04      	itt	eq
 8000b94:	6819      	ldreq	r1, [r3, #0]
 8000b96:	685b      	ldreq	r3, [r3, #4]
 8000b98:	6063      	str	r3, [r4, #4]
 8000b9a:	bf04      	itt	eq
 8000b9c:	1809      	addeq	r1, r1, r0
 8000b9e:	6021      	streq	r1, [r4, #0]
 8000ba0:	6054      	str	r4, [r2, #4]
 8000ba2:	e7ca      	b.n	8000b3a <_free_r+0x22>
 8000ba4:	bd38      	pop	{r3, r4, r5, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001b8 	.word	0x200001b8

08000bac <sbrk_aligned>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	4e0f      	ldr	r6, [pc, #60]	@ (8000bec <sbrk_aligned+0x40>)
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	6831      	ldr	r1, [r6, #0]
 8000bb4:	4605      	mov	r5, r0
 8000bb6:	b911      	cbnz	r1, 8000bbe <sbrk_aligned+0x12>
 8000bb8:	f000 ff34 	bl	8001a24 <_sbrk_r>
 8000bbc:	6030      	str	r0, [r6, #0]
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f000 ff2f 	bl	8001a24 <_sbrk_r>
 8000bc6:	1c43      	adds	r3, r0, #1
 8000bc8:	d103      	bne.n	8000bd2 <sbrk_aligned+0x26>
 8000bca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000bce:	4620      	mov	r0, r4
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
 8000bd2:	1cc4      	adds	r4, r0, #3
 8000bd4:	f024 0403 	bic.w	r4, r4, #3
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d0f8      	beq.n	8000bce <sbrk_aligned+0x22>
 8000bdc:	1a21      	subs	r1, r4, r0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f000 ff20 	bl	8001a24 <_sbrk_r>
 8000be4:	3001      	adds	r0, #1
 8000be6:	d1f2      	bne.n	8000bce <sbrk_aligned+0x22>
 8000be8:	e7ef      	b.n	8000bca <sbrk_aligned+0x1e>
 8000bea:	bf00      	nop
 8000bec:	200001b4 	.word	0x200001b4

08000bf0 <_malloc_r>:
 8000bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf4:	1ccd      	adds	r5, r1, #3
 8000bf6:	f025 0503 	bic.w	r5, r5, #3
 8000bfa:	3508      	adds	r5, #8
 8000bfc:	2d0c      	cmp	r5, #12
 8000bfe:	bf38      	it	cc
 8000c00:	250c      	movcc	r5, #12
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	4606      	mov	r6, r0
 8000c06:	db01      	blt.n	8000c0c <_malloc_r+0x1c>
 8000c08:	42a9      	cmp	r1, r5
 8000c0a:	d904      	bls.n	8000c16 <_malloc_r+0x26>
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	6033      	str	r3, [r6, #0]
 8000c10:	2000      	movs	r0, #0
 8000c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cec <_malloc_r+0xfc>
 8000c1a:	f000 f869 	bl	8000cf0 <__malloc_lock>
 8000c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c22:	461c      	mov	r4, r3
 8000c24:	bb44      	cbnz	r4, 8000c78 <_malloc_r+0x88>
 8000c26:	4629      	mov	r1, r5
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f7ff ffbf 	bl	8000bac <sbrk_aligned>
 8000c2e:	1c43      	adds	r3, r0, #1
 8000c30:	4604      	mov	r4, r0
 8000c32:	d158      	bne.n	8000ce6 <_malloc_r+0xf6>
 8000c34:	f8d8 4000 	ldr.w	r4, [r8]
 8000c38:	4627      	mov	r7, r4
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d143      	bne.n	8000cc6 <_malloc_r+0xd6>
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d04b      	beq.n	8000cda <_malloc_r+0xea>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	4639      	mov	r1, r7
 8000c46:	4630      	mov	r0, r6
 8000c48:	eb04 0903 	add.w	r9, r4, r3
 8000c4c:	f000 feea 	bl	8001a24 <_sbrk_r>
 8000c50:	4581      	cmp	r9, r0
 8000c52:	d142      	bne.n	8000cda <_malloc_r+0xea>
 8000c54:	6821      	ldr	r1, [r4, #0]
 8000c56:	1a6d      	subs	r5, r5, r1
 8000c58:	4629      	mov	r1, r5
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f7ff ffa6 	bl	8000bac <sbrk_aligned>
 8000c60:	3001      	adds	r0, #1
 8000c62:	d03a      	beq.n	8000cda <_malloc_r+0xea>
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	442b      	add	r3, r5
 8000c68:	6023      	str	r3, [r4, #0]
 8000c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	bb62      	cbnz	r2, 8000ccc <_malloc_r+0xdc>
 8000c72:	f8c8 7000 	str.w	r7, [r8]
 8000c76:	e00f      	b.n	8000c98 <_malloc_r+0xa8>
 8000c78:	6822      	ldr	r2, [r4, #0]
 8000c7a:	1b52      	subs	r2, r2, r5
 8000c7c:	d420      	bmi.n	8000cc0 <_malloc_r+0xd0>
 8000c7e:	2a0b      	cmp	r2, #11
 8000c80:	d917      	bls.n	8000cb2 <_malloc_r+0xc2>
 8000c82:	1961      	adds	r1, r4, r5
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	6025      	str	r5, [r4, #0]
 8000c88:	bf18      	it	ne
 8000c8a:	6059      	strne	r1, [r3, #4]
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	bf08      	it	eq
 8000c90:	f8c8 1000 	streq.w	r1, [r8]
 8000c94:	5162      	str	r2, [r4, r5]
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f000 f82f 	bl	8000cfc <__malloc_unlock>
 8000c9e:	f104 000b 	add.w	r0, r4, #11
 8000ca2:	1d23      	adds	r3, r4, #4
 8000ca4:	f020 0007 	bic.w	r0, r0, #7
 8000ca8:	1ac2      	subs	r2, r0, r3
 8000caa:	bf1c      	itt	ne
 8000cac:	1a1b      	subne	r3, r3, r0
 8000cae:	50a3      	strne	r3, [r4, r2]
 8000cb0:	e7af      	b.n	8000c12 <_malloc_r+0x22>
 8000cb2:	6862      	ldr	r2, [r4, #4]
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	bf0c      	ite	eq
 8000cb8:	f8c8 2000 	streq.w	r2, [r8]
 8000cbc:	605a      	strne	r2, [r3, #4]
 8000cbe:	e7eb      	b.n	8000c98 <_malloc_r+0xa8>
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	6864      	ldr	r4, [r4, #4]
 8000cc4:	e7ae      	b.n	8000c24 <_malloc_r+0x34>
 8000cc6:	463c      	mov	r4, r7
 8000cc8:	687f      	ldr	r7, [r7, #4]
 8000cca:	e7b6      	b.n	8000c3a <_malloc_r+0x4a>
 8000ccc:	461a      	mov	r2, r3
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	d1fb      	bne.n	8000ccc <_malloc_r+0xdc>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6053      	str	r3, [r2, #4]
 8000cd8:	e7de      	b.n	8000c98 <_malloc_r+0xa8>
 8000cda:	230c      	movs	r3, #12
 8000cdc:	6033      	str	r3, [r6, #0]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f000 f80c 	bl	8000cfc <__malloc_unlock>
 8000ce4:	e794      	b.n	8000c10 <_malloc_r+0x20>
 8000ce6:	6005      	str	r5, [r0, #0]
 8000ce8:	e7d6      	b.n	8000c98 <_malloc_r+0xa8>
 8000cea:	bf00      	nop
 8000cec:	200001b8 	.word	0x200001b8

08000cf0 <__malloc_lock>:
 8000cf0:	4801      	ldr	r0, [pc, #4]	@ (8000cf8 <__malloc_lock+0x8>)
 8000cf2:	f7ff bf0f 	b.w	8000b14 <__retarget_lock_acquire_recursive>
 8000cf6:	bf00      	nop
 8000cf8:	200001b0 	.word	0x200001b0

08000cfc <__malloc_unlock>:
 8000cfc:	4801      	ldr	r0, [pc, #4]	@ (8000d04 <__malloc_unlock+0x8>)
 8000cfe:	f7ff bf0a 	b.w	8000b16 <__retarget_lock_release_recursive>
 8000d02:	bf00      	nop
 8000d04:	200001b0 	.word	0x200001b0

08000d08 <__ssputs_r>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	688e      	ldr	r6, [r1, #8]
 8000d0e:	461f      	mov	r7, r3
 8000d10:	42be      	cmp	r6, r7
 8000d12:	680b      	ldr	r3, [r1, #0]
 8000d14:	4682      	mov	sl, r0
 8000d16:	460c      	mov	r4, r1
 8000d18:	4690      	mov	r8, r2
 8000d1a:	d82d      	bhi.n	8000d78 <__ssputs_r+0x70>
 8000d1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000d24:	d026      	beq.n	8000d74 <__ssputs_r+0x6c>
 8000d26:	6965      	ldr	r5, [r4, #20]
 8000d28:	6909      	ldr	r1, [r1, #16]
 8000d2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d2e:	eba3 0901 	sub.w	r9, r3, r1
 8000d32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d36:	1c7b      	adds	r3, r7, #1
 8000d38:	444b      	add	r3, r9
 8000d3a:	106d      	asrs	r5, r5, #1
 8000d3c:	429d      	cmp	r5, r3
 8000d3e:	bf38      	it	cc
 8000d40:	461d      	movcc	r5, r3
 8000d42:	0553      	lsls	r3, r2, #21
 8000d44:	d527      	bpl.n	8000d96 <__ssputs_r+0x8e>
 8000d46:	4629      	mov	r1, r5
 8000d48:	f7ff ff52 	bl	8000bf0 <_malloc_r>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	b360      	cbz	r0, 8000daa <__ssputs_r+0xa2>
 8000d50:	6921      	ldr	r1, [r4, #16]
 8000d52:	464a      	mov	r2, r9
 8000d54:	f000 fe76 	bl	8001a44 <memcpy>
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d62:	81a3      	strh	r3, [r4, #12]
 8000d64:	6126      	str	r6, [r4, #16]
 8000d66:	6165      	str	r5, [r4, #20]
 8000d68:	444e      	add	r6, r9
 8000d6a:	eba5 0509 	sub.w	r5, r5, r9
 8000d6e:	6026      	str	r6, [r4, #0]
 8000d70:	60a5      	str	r5, [r4, #8]
 8000d72:	463e      	mov	r6, r7
 8000d74:	42be      	cmp	r6, r7
 8000d76:	d900      	bls.n	8000d7a <__ssputs_r+0x72>
 8000d78:	463e      	mov	r6, r7
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	4632      	mov	r2, r6
 8000d7e:	4641      	mov	r1, r8
 8000d80:	f000 fe35 	bl	80019ee <memmove>
 8000d84:	68a3      	ldr	r3, [r4, #8]
 8000d86:	1b9b      	subs	r3, r3, r6
 8000d88:	60a3      	str	r3, [r4, #8]
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	4433      	add	r3, r6
 8000d8e:	6023      	str	r3, [r4, #0]
 8000d90:	2000      	movs	r0, #0
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	462a      	mov	r2, r5
 8000d98:	f000 fe62 	bl	8001a60 <_realloc_r>
 8000d9c:	4606      	mov	r6, r0
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d1e0      	bne.n	8000d64 <__ssputs_r+0x5c>
 8000da2:	6921      	ldr	r1, [r4, #16]
 8000da4:	4650      	mov	r0, sl
 8000da6:	f7ff feb7 	bl	8000b18 <_free_r>
 8000daa:	230c      	movs	r3, #12
 8000dac:	f8ca 3000 	str.w	r3, [sl]
 8000db0:	89a3      	ldrh	r3, [r4, #12]
 8000db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db6:	81a3      	strh	r3, [r4, #12]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dbc:	e7e9      	b.n	8000d92 <__ssputs_r+0x8a>
	...

08000dc0 <_svfiprintf_r>:
 8000dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dc4:	4698      	mov	r8, r3
 8000dc6:	898b      	ldrh	r3, [r1, #12]
 8000dc8:	061b      	lsls	r3, r3, #24
 8000dca:	b09d      	sub	sp, #116	@ 0x74
 8000dcc:	4607      	mov	r7, r0
 8000dce:	460d      	mov	r5, r1
 8000dd0:	4614      	mov	r4, r2
 8000dd2:	d510      	bpl.n	8000df6 <_svfiprintf_r+0x36>
 8000dd4:	690b      	ldr	r3, [r1, #16]
 8000dd6:	b973      	cbnz	r3, 8000df6 <_svfiprintf_r+0x36>
 8000dd8:	2140      	movs	r1, #64	@ 0x40
 8000dda:	f7ff ff09 	bl	8000bf0 <_malloc_r>
 8000dde:	6028      	str	r0, [r5, #0]
 8000de0:	6128      	str	r0, [r5, #16]
 8000de2:	b930      	cbnz	r0, 8000df2 <_svfiprintf_r+0x32>
 8000de4:	230c      	movs	r3, #12
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dec:	b01d      	add	sp, #116	@ 0x74
 8000dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df2:	2340      	movs	r3, #64	@ 0x40
 8000df4:	616b      	str	r3, [r5, #20]
 8000df6:	2300      	movs	r3, #0
 8000df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e04:	2330      	movs	r3, #48	@ 0x30
 8000e06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000fa4 <_svfiprintf_r+0x1e4>
 8000e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e0e:	f04f 0901 	mov.w	r9, #1
 8000e12:	4623      	mov	r3, r4
 8000e14:	469a      	mov	sl, r3
 8000e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e1a:	b10a      	cbz	r2, 8000e20 <_svfiprintf_r+0x60>
 8000e1c:	2a25      	cmp	r2, #37	@ 0x25
 8000e1e:	d1f9      	bne.n	8000e14 <_svfiprintf_r+0x54>
 8000e20:	ebba 0b04 	subs.w	fp, sl, r4
 8000e24:	d00b      	beq.n	8000e3e <_svfiprintf_r+0x7e>
 8000e26:	465b      	mov	r3, fp
 8000e28:	4622      	mov	r2, r4
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	f7ff ff6b 	bl	8000d08 <__ssputs_r>
 8000e32:	3001      	adds	r0, #1
 8000e34:	f000 80a7 	beq.w	8000f86 <_svfiprintf_r+0x1c6>
 8000e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e3a:	445a      	add	r2, fp
 8000e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 809f 	beq.w	8000f86 <_svfiprintf_r+0x1c6>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e52:	f10a 0a01 	add.w	sl, sl, #1
 8000e56:	9304      	str	r3, [sp, #16]
 8000e58:	9307      	str	r3, [sp, #28]
 8000e5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e60:	4654      	mov	r4, sl
 8000e62:	2205      	movs	r2, #5
 8000e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e68:	484e      	ldr	r0, [pc, #312]	@ (8000fa4 <_svfiprintf_r+0x1e4>)
 8000e6a:	f7ff f9b9 	bl	80001e0 <memchr>
 8000e6e:	9a04      	ldr	r2, [sp, #16]
 8000e70:	b9d8      	cbnz	r0, 8000eaa <_svfiprintf_r+0xea>
 8000e72:	06d0      	lsls	r0, r2, #27
 8000e74:	bf44      	itt	mi
 8000e76:	2320      	movmi	r3, #32
 8000e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e7c:	0711      	lsls	r1, r2, #28
 8000e7e:	bf44      	itt	mi
 8000e80:	232b      	movmi	r3, #43	@ 0x2b
 8000e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e86:	f89a 3000 	ldrb.w	r3, [sl]
 8000e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e8c:	d015      	beq.n	8000eba <_svfiprintf_r+0xfa>
 8000e8e:	9a07      	ldr	r2, [sp, #28]
 8000e90:	4654      	mov	r4, sl
 8000e92:	2000      	movs	r0, #0
 8000e94:	f04f 0c0a 	mov.w	ip, #10
 8000e98:	4621      	mov	r1, r4
 8000e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e9e:	3b30      	subs	r3, #48	@ 0x30
 8000ea0:	2b09      	cmp	r3, #9
 8000ea2:	d94b      	bls.n	8000f3c <_svfiprintf_r+0x17c>
 8000ea4:	b1b0      	cbz	r0, 8000ed4 <_svfiprintf_r+0x114>
 8000ea6:	9207      	str	r2, [sp, #28]
 8000ea8:	e014      	b.n	8000ed4 <_svfiprintf_r+0x114>
 8000eaa:	eba0 0308 	sub.w	r3, r0, r8
 8000eae:	fa09 f303 	lsl.w	r3, r9, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	9304      	str	r3, [sp, #16]
 8000eb6:	46a2      	mov	sl, r4
 8000eb8:	e7d2      	b.n	8000e60 <_svfiprintf_r+0xa0>
 8000eba:	9b03      	ldr	r3, [sp, #12]
 8000ebc:	1d19      	adds	r1, r3, #4
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	9103      	str	r1, [sp, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bfbb      	ittet	lt
 8000ec6:	425b      	neglt	r3, r3
 8000ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8000ecc:	9307      	strge	r3, [sp, #28]
 8000ece:	9307      	strlt	r3, [sp, #28]
 8000ed0:	bfb8      	it	lt
 8000ed2:	9204      	strlt	r2, [sp, #16]
 8000ed4:	7823      	ldrb	r3, [r4, #0]
 8000ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ed8:	d10a      	bne.n	8000ef0 <_svfiprintf_r+0x130>
 8000eda:	7863      	ldrb	r3, [r4, #1]
 8000edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ede:	d132      	bne.n	8000f46 <_svfiprintf_r+0x186>
 8000ee0:	9b03      	ldr	r3, [sp, #12]
 8000ee2:	1d1a      	adds	r2, r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	9203      	str	r2, [sp, #12]
 8000ee8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000eec:	3402      	adds	r4, #2
 8000eee:	9305      	str	r3, [sp, #20]
 8000ef0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000fa8 <_svfiprintf_r+0x1e8>
 8000ef4:	7821      	ldrb	r1, [r4, #0]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	4650      	mov	r0, sl
 8000efa:	f7ff f971 	bl	80001e0 <memchr>
 8000efe:	b138      	cbz	r0, 8000f10 <_svfiprintf_r+0x150>
 8000f00:	9b04      	ldr	r3, [sp, #16]
 8000f02:	eba0 000a 	sub.w	r0, r0, sl
 8000f06:	2240      	movs	r2, #64	@ 0x40
 8000f08:	4082      	lsls	r2, r0
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	3401      	adds	r4, #1
 8000f0e:	9304      	str	r3, [sp, #16]
 8000f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f14:	4825      	ldr	r0, [pc, #148]	@ (8000fac <_svfiprintf_r+0x1ec>)
 8000f16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f1a:	2206      	movs	r2, #6
 8000f1c:	f7ff f960 	bl	80001e0 <memchr>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d036      	beq.n	8000f92 <_svfiprintf_r+0x1d2>
 8000f24:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <_svfiprintf_r+0x1f0>)
 8000f26:	bb1b      	cbnz	r3, 8000f70 <_svfiprintf_r+0x1b0>
 8000f28:	9b03      	ldr	r3, [sp, #12]
 8000f2a:	3307      	adds	r3, #7
 8000f2c:	f023 0307 	bic.w	r3, r3, #7
 8000f30:	3308      	adds	r3, #8
 8000f32:	9303      	str	r3, [sp, #12]
 8000f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f36:	4433      	add	r3, r6
 8000f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f3a:	e76a      	b.n	8000e12 <_svfiprintf_r+0x52>
 8000f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f40:	460c      	mov	r4, r1
 8000f42:	2001      	movs	r0, #1
 8000f44:	e7a8      	b.n	8000e98 <_svfiprintf_r+0xd8>
 8000f46:	2300      	movs	r3, #0
 8000f48:	3401      	adds	r4, #1
 8000f4a:	9305      	str	r3, [sp, #20]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 0c0a 	mov.w	ip, #10
 8000f52:	4620      	mov	r0, r4
 8000f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f58:	3a30      	subs	r2, #48	@ 0x30
 8000f5a:	2a09      	cmp	r2, #9
 8000f5c:	d903      	bls.n	8000f66 <_svfiprintf_r+0x1a6>
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0c6      	beq.n	8000ef0 <_svfiprintf_r+0x130>
 8000f62:	9105      	str	r1, [sp, #20]
 8000f64:	e7c4      	b.n	8000ef0 <_svfiprintf_r+0x130>
 8000f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e7f0      	b.n	8000f52 <_svfiprintf_r+0x192>
 8000f70:	ab03      	add	r3, sp, #12
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	462a      	mov	r2, r5
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <_svfiprintf_r+0x1f4>)
 8000f78:	a904      	add	r1, sp, #16
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	f3af 8000 	nop.w
 8000f80:	1c42      	adds	r2, r0, #1
 8000f82:	4606      	mov	r6, r0
 8000f84:	d1d6      	bne.n	8000f34 <_svfiprintf_r+0x174>
 8000f86:	89ab      	ldrh	r3, [r5, #12]
 8000f88:	065b      	lsls	r3, r3, #25
 8000f8a:	f53f af2d 	bmi.w	8000de8 <_svfiprintf_r+0x28>
 8000f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f90:	e72c      	b.n	8000dec <_svfiprintf_r+0x2c>
 8000f92:	ab03      	add	r3, sp, #12
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	462a      	mov	r2, r5
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <_svfiprintf_r+0x1f4>)
 8000f9a:	a904      	add	r1, sp, #16
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	f000 fa45 	bl	800142c <_printf_i>
 8000fa2:	e7ed      	b.n	8000f80 <_svfiprintf_r+0x1c0>
 8000fa4:	08001d34 	.word	0x08001d34
 8000fa8:	08001d3a 	.word	0x08001d3a
 8000fac:	08001d3e 	.word	0x08001d3e
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	08000d09 	.word	0x08000d09

08000fb8 <_sungetc_r>:
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	1c4b      	adds	r3, r1, #1
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	d103      	bne.n	8000fc8 <_sungetc_r+0x10>
 8000fc0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000fc4:	4628      	mov	r0, r5
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	8993      	ldrh	r3, [r2, #12]
 8000fca:	f023 0320 	bic.w	r3, r3, #32
 8000fce:	8193      	strh	r3, [r2, #12]
 8000fd0:	6853      	ldr	r3, [r2, #4]
 8000fd2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000fd4:	b2cd      	uxtb	r5, r1
 8000fd6:	b18a      	cbz	r2, 8000ffc <_sungetc_r+0x44>
 8000fd8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dd08      	ble.n	8000ff0 <_sungetc_r+0x38>
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	6022      	str	r2, [r4, #0]
 8000fe4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000fe8:	6863      	ldr	r3, [r4, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	6063      	str	r3, [r4, #4]
 8000fee:	e7e9      	b.n	8000fc4 <_sungetc_r+0xc>
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f000 fcc2 	bl	800197a <__submore>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d0f1      	beq.n	8000fde <_sungetc_r+0x26>
 8000ffa:	e7e1      	b.n	8000fc0 <_sungetc_r+0x8>
 8000ffc:	6921      	ldr	r1, [r4, #16]
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	b141      	cbz	r1, 8001014 <_sungetc_r+0x5c>
 8001002:	4291      	cmp	r1, r2
 8001004:	d206      	bcs.n	8001014 <_sungetc_r+0x5c>
 8001006:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800100a:	42a9      	cmp	r1, r5
 800100c:	d102      	bne.n	8001014 <_sungetc_r+0x5c>
 800100e:	3a01      	subs	r2, #1
 8001010:	6022      	str	r2, [r4, #0]
 8001012:	e7ea      	b.n	8000fea <_sungetc_r+0x32>
 8001014:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8001018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800101c:	6363      	str	r3, [r4, #52]	@ 0x34
 800101e:	2303      	movs	r3, #3
 8001020:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001022:	4623      	mov	r3, r4
 8001024:	f803 5f46 	strb.w	r5, [r3, #70]!
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	e7de      	b.n	8000fec <_sungetc_r+0x34>

0800102e <__ssrefill_r>:
 800102e:	b510      	push	{r4, lr}
 8001030:	460c      	mov	r4, r1
 8001032:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001034:	b169      	cbz	r1, 8001052 <__ssrefill_r+0x24>
 8001036:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800103a:	4299      	cmp	r1, r3
 800103c:	d001      	beq.n	8001042 <__ssrefill_r+0x14>
 800103e:	f7ff fd6b 	bl	8000b18 <_free_r>
 8001042:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001044:	6063      	str	r3, [r4, #4]
 8001046:	2000      	movs	r0, #0
 8001048:	6360      	str	r0, [r4, #52]	@ 0x34
 800104a:	b113      	cbz	r3, 8001052 <__ssrefill_r+0x24>
 800104c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800104e:	6023      	str	r3, [r4, #0]
 8001050:	bd10      	pop	{r4, pc}
 8001052:	6923      	ldr	r3, [r4, #16]
 8001054:	6023      	str	r3, [r4, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	6063      	str	r3, [r4, #4]
 800105a:	89a3      	ldrh	r3, [r4, #12]
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	81a3      	strh	r3, [r4, #12]
 8001062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001066:	e7f3      	b.n	8001050 <__ssrefill_r+0x22>

08001068 <__ssvfiscanf_r>:
 8001068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800106c:	460c      	mov	r4, r1
 800106e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8001072:	2100      	movs	r1, #0
 8001074:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8001078:	49a5      	ldr	r1, [pc, #660]	@ (8001310 <__ssvfiscanf_r+0x2a8>)
 800107a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800107c:	f10d 0804 	add.w	r8, sp, #4
 8001080:	49a4      	ldr	r1, [pc, #656]	@ (8001314 <__ssvfiscanf_r+0x2ac>)
 8001082:	4fa5      	ldr	r7, [pc, #660]	@ (8001318 <__ssvfiscanf_r+0x2b0>)
 8001084:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8001088:	4606      	mov	r6, r0
 800108a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	7813      	ldrb	r3, [r2, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 8158 	beq.w	8001346 <__ssvfiscanf_r+0x2de>
 8001096:	5cf9      	ldrb	r1, [r7, r3]
 8001098:	f011 0108 	ands.w	r1, r1, #8
 800109c:	f102 0501 	add.w	r5, r2, #1
 80010a0:	d019      	beq.n	80010d6 <__ssvfiscanf_r+0x6e>
 80010a2:	6863      	ldr	r3, [r4, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd0f      	ble.n	80010c8 <__ssvfiscanf_r+0x60>
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	5cba      	ldrb	r2, [r7, r2]
 80010ae:	0712      	lsls	r2, r2, #28
 80010b0:	d401      	bmi.n	80010b6 <__ssvfiscanf_r+0x4e>
 80010b2:	462a      	mov	r2, r5
 80010b4:	e7eb      	b.n	800108e <__ssvfiscanf_r+0x26>
 80010b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80010b8:	3201      	adds	r2, #1
 80010ba:	9245      	str	r2, [sp, #276]	@ 0x114
 80010bc:	6862      	ldr	r2, [r4, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	3a01      	subs	r2, #1
 80010c2:	6062      	str	r2, [r4, #4]
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	e7ec      	b.n	80010a2 <__ssvfiscanf_r+0x3a>
 80010c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80010ca:	4621      	mov	r1, r4
 80010cc:	4630      	mov	r0, r6
 80010ce:	4798      	blx	r3
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d0e9      	beq.n	80010a8 <__ssvfiscanf_r+0x40>
 80010d4:	e7ed      	b.n	80010b2 <__ssvfiscanf_r+0x4a>
 80010d6:	2b25      	cmp	r3, #37	@ 0x25
 80010d8:	d012      	beq.n	8001100 <__ssvfiscanf_r+0x98>
 80010da:	4699      	mov	r9, r3
 80010dc:	6863      	ldr	r3, [r4, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f340 8093 	ble.w	800120a <__ssvfiscanf_r+0x1a2>
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	7813      	ldrb	r3, [r2, #0]
 80010e8:	454b      	cmp	r3, r9
 80010ea:	f040 812c 	bne.w	8001346 <__ssvfiscanf_r+0x2de>
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	6063      	str	r3, [r4, #4]
 80010f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80010f6:	3201      	adds	r2, #1
 80010f8:	3301      	adds	r3, #1
 80010fa:	6022      	str	r2, [r4, #0]
 80010fc:	9345      	str	r3, [sp, #276]	@ 0x114
 80010fe:	e7d8      	b.n	80010b2 <__ssvfiscanf_r+0x4a>
 8001100:	9141      	str	r1, [sp, #260]	@ 0x104
 8001102:	9143      	str	r1, [sp, #268]	@ 0x10c
 8001104:	7853      	ldrb	r3, [r2, #1]
 8001106:	2b2a      	cmp	r3, #42	@ 0x2a
 8001108:	bf02      	ittt	eq
 800110a:	2310      	moveq	r3, #16
 800110c:	1c95      	addeq	r5, r2, #2
 800110e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8001110:	220a      	movs	r2, #10
 8001112:	46a9      	mov	r9, r5
 8001114:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001118:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800111c:	2b09      	cmp	r3, #9
 800111e:	d91e      	bls.n	800115e <__ssvfiscanf_r+0xf6>
 8001120:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800131c <__ssvfiscanf_r+0x2b4>
 8001124:	2203      	movs	r2, #3
 8001126:	4650      	mov	r0, sl
 8001128:	f7ff f85a 	bl	80001e0 <memchr>
 800112c:	b138      	cbz	r0, 800113e <__ssvfiscanf_r+0xd6>
 800112e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001130:	eba0 000a 	sub.w	r0, r0, sl
 8001134:	2301      	movs	r3, #1
 8001136:	4083      	lsls	r3, r0
 8001138:	4313      	orrs	r3, r2
 800113a:	9341      	str	r3, [sp, #260]	@ 0x104
 800113c:	464d      	mov	r5, r9
 800113e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001142:	2b78      	cmp	r3, #120	@ 0x78
 8001144:	d806      	bhi.n	8001154 <__ssvfiscanf_r+0xec>
 8001146:	2b57      	cmp	r3, #87	@ 0x57
 8001148:	d810      	bhi.n	800116c <__ssvfiscanf_r+0x104>
 800114a:	2b25      	cmp	r3, #37	@ 0x25
 800114c:	d0c5      	beq.n	80010da <__ssvfiscanf_r+0x72>
 800114e:	d857      	bhi.n	8001200 <__ssvfiscanf_r+0x198>
 8001150:	2b00      	cmp	r3, #0
 8001152:	d065      	beq.n	8001220 <__ssvfiscanf_r+0x1b8>
 8001154:	2303      	movs	r3, #3
 8001156:	9347      	str	r3, [sp, #284]	@ 0x11c
 8001158:	230a      	movs	r3, #10
 800115a:	9342      	str	r3, [sp, #264]	@ 0x108
 800115c:	e078      	b.n	8001250 <__ssvfiscanf_r+0x1e8>
 800115e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8001160:	fb02 1103 	mla	r1, r2, r3, r1
 8001164:	3930      	subs	r1, #48	@ 0x30
 8001166:	9143      	str	r1, [sp, #268]	@ 0x10c
 8001168:	464d      	mov	r5, r9
 800116a:	e7d2      	b.n	8001112 <__ssvfiscanf_r+0xaa>
 800116c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8001170:	2a20      	cmp	r2, #32
 8001172:	d8ef      	bhi.n	8001154 <__ssvfiscanf_r+0xec>
 8001174:	a101      	add	r1, pc, #4	@ (adr r1, 800117c <__ssvfiscanf_r+0x114>)
 8001176:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800117a:	bf00      	nop
 800117c:	0800122f 	.word	0x0800122f
 8001180:	08001155 	.word	0x08001155
 8001184:	08001155 	.word	0x08001155
 8001188:	08001289 	.word	0x08001289
 800118c:	08001155 	.word	0x08001155
 8001190:	08001155 	.word	0x08001155
 8001194:	08001155 	.word	0x08001155
 8001198:	08001155 	.word	0x08001155
 800119c:	08001155 	.word	0x08001155
 80011a0:	08001155 	.word	0x08001155
 80011a4:	08001155 	.word	0x08001155
 80011a8:	0800129f 	.word	0x0800129f
 80011ac:	08001285 	.word	0x08001285
 80011b0:	08001207 	.word	0x08001207
 80011b4:	08001207 	.word	0x08001207
 80011b8:	08001207 	.word	0x08001207
 80011bc:	08001155 	.word	0x08001155
 80011c0:	08001241 	.word	0x08001241
 80011c4:	08001155 	.word	0x08001155
 80011c8:	08001155 	.word	0x08001155
 80011cc:	08001155 	.word	0x08001155
 80011d0:	08001155 	.word	0x08001155
 80011d4:	080012af 	.word	0x080012af
 80011d8:	08001249 	.word	0x08001249
 80011dc:	08001227 	.word	0x08001227
 80011e0:	08001155 	.word	0x08001155
 80011e4:	08001155 	.word	0x08001155
 80011e8:	080012ab 	.word	0x080012ab
 80011ec:	08001155 	.word	0x08001155
 80011f0:	08001285 	.word	0x08001285
 80011f4:	08001155 	.word	0x08001155
 80011f8:	08001155 	.word	0x08001155
 80011fc:	0800122f 	.word	0x0800122f
 8001200:	3b45      	subs	r3, #69	@ 0x45
 8001202:	2b02      	cmp	r3, #2
 8001204:	d8a6      	bhi.n	8001154 <__ssvfiscanf_r+0xec>
 8001206:	2305      	movs	r3, #5
 8001208:	e021      	b.n	800124e <__ssvfiscanf_r+0x1e6>
 800120a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800120c:	4621      	mov	r1, r4
 800120e:	4630      	mov	r0, r6
 8001210:	4798      	blx	r3
 8001212:	2800      	cmp	r0, #0
 8001214:	f43f af66 	beq.w	80010e4 <__ssvfiscanf_r+0x7c>
 8001218:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800121a:	2800      	cmp	r0, #0
 800121c:	f040 808b 	bne.w	8001336 <__ssvfiscanf_r+0x2ce>
 8001220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001224:	e08b      	b.n	800133e <__ssvfiscanf_r+0x2d6>
 8001226:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001228:	f042 0220 	orr.w	r2, r2, #32
 800122c:	9241      	str	r2, [sp, #260]	@ 0x104
 800122e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001234:	9241      	str	r2, [sp, #260]	@ 0x104
 8001236:	2210      	movs	r2, #16
 8001238:	2b6e      	cmp	r3, #110	@ 0x6e
 800123a:	9242      	str	r2, [sp, #264]	@ 0x108
 800123c:	d902      	bls.n	8001244 <__ssvfiscanf_r+0x1dc>
 800123e:	e005      	b.n	800124c <__ssvfiscanf_r+0x1e4>
 8001240:	2300      	movs	r3, #0
 8001242:	9342      	str	r3, [sp, #264]	@ 0x108
 8001244:	2303      	movs	r3, #3
 8001246:	e002      	b.n	800124e <__ssvfiscanf_r+0x1e6>
 8001248:	2308      	movs	r3, #8
 800124a:	9342      	str	r3, [sp, #264]	@ 0x108
 800124c:	2304      	movs	r3, #4
 800124e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8001250:	6863      	ldr	r3, [r4, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	dd39      	ble.n	80012ca <__ssvfiscanf_r+0x262>
 8001256:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001258:	0659      	lsls	r1, r3, #25
 800125a:	d404      	bmi.n	8001266 <__ssvfiscanf_r+0x1fe>
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	5cba      	ldrb	r2, [r7, r2]
 8001262:	0712      	lsls	r2, r2, #28
 8001264:	d438      	bmi.n	80012d8 <__ssvfiscanf_r+0x270>
 8001266:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8001268:	2b02      	cmp	r3, #2
 800126a:	dc47      	bgt.n	80012fc <__ssvfiscanf_r+0x294>
 800126c:	466b      	mov	r3, sp
 800126e:	4622      	mov	r2, r4
 8001270:	a941      	add	r1, sp, #260	@ 0x104
 8001272:	4630      	mov	r0, r6
 8001274:	f000 f9fa 	bl	800166c <_scanf_chars>
 8001278:	2801      	cmp	r0, #1
 800127a:	d064      	beq.n	8001346 <__ssvfiscanf_r+0x2de>
 800127c:	2802      	cmp	r0, #2
 800127e:	f47f af18 	bne.w	80010b2 <__ssvfiscanf_r+0x4a>
 8001282:	e7c9      	b.n	8001218 <__ssvfiscanf_r+0x1b0>
 8001284:	220a      	movs	r2, #10
 8001286:	e7d7      	b.n	8001238 <__ssvfiscanf_r+0x1d0>
 8001288:	4629      	mov	r1, r5
 800128a:	4640      	mov	r0, r8
 800128c:	f000 fb3c 	bl	8001908 <__sccl>
 8001290:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001296:	9341      	str	r3, [sp, #260]	@ 0x104
 8001298:	4605      	mov	r5, r0
 800129a:	2301      	movs	r3, #1
 800129c:	e7d7      	b.n	800124e <__ssvfiscanf_r+0x1e6>
 800129e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80012a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80012a6:	2300      	movs	r3, #0
 80012a8:	e7d1      	b.n	800124e <__ssvfiscanf_r+0x1e6>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e7cf      	b.n	800124e <__ssvfiscanf_r+0x1e6>
 80012ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80012b0:	06c3      	lsls	r3, r0, #27
 80012b2:	f53f aefe 	bmi.w	80010b2 <__ssvfiscanf_r+0x4a>
 80012b6:	9b00      	ldr	r3, [sp, #0]
 80012b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80012ba:	1d19      	adds	r1, r3, #4
 80012bc:	9100      	str	r1, [sp, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	07c0      	lsls	r0, r0, #31
 80012c2:	bf4c      	ite	mi
 80012c4:	801a      	strhmi	r2, [r3, #0]
 80012c6:	601a      	strpl	r2, [r3, #0]
 80012c8:	e6f3      	b.n	80010b2 <__ssvfiscanf_r+0x4a>
 80012ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80012cc:	4621      	mov	r1, r4
 80012ce:	4630      	mov	r0, r6
 80012d0:	4798      	blx	r3
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d0bf      	beq.n	8001256 <__ssvfiscanf_r+0x1ee>
 80012d6:	e79f      	b.n	8001218 <__ssvfiscanf_r+0x1b0>
 80012d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80012da:	3201      	adds	r2, #1
 80012dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80012de:	6862      	ldr	r2, [r4, #4]
 80012e0:	3a01      	subs	r2, #1
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	6062      	str	r2, [r4, #4]
 80012e6:	dd02      	ble.n	80012ee <__ssvfiscanf_r+0x286>
 80012e8:	3301      	adds	r3, #1
 80012ea:	6023      	str	r3, [r4, #0]
 80012ec:	e7b6      	b.n	800125c <__ssvfiscanf_r+0x1f4>
 80012ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80012f0:	4621      	mov	r1, r4
 80012f2:	4630      	mov	r0, r6
 80012f4:	4798      	blx	r3
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d0b0      	beq.n	800125c <__ssvfiscanf_r+0x1f4>
 80012fa:	e78d      	b.n	8001218 <__ssvfiscanf_r+0x1b0>
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	dc0f      	bgt.n	8001320 <__ssvfiscanf_r+0x2b8>
 8001300:	466b      	mov	r3, sp
 8001302:	4622      	mov	r2, r4
 8001304:	a941      	add	r1, sp, #260	@ 0x104
 8001306:	4630      	mov	r0, r6
 8001308:	f000 fa0a 	bl	8001720 <_scanf_i>
 800130c:	e7b4      	b.n	8001278 <__ssvfiscanf_r+0x210>
 800130e:	bf00      	nop
 8001310:	08000fb9 	.word	0x08000fb9
 8001314:	0800102f 	.word	0x0800102f
 8001318:	08001d83 	.word	0x08001d83
 800131c:	08001d3a 	.word	0x08001d3a
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <__ssvfiscanf_r+0x2e4>)
 8001322:	2b00      	cmp	r3, #0
 8001324:	f43f aec5 	beq.w	80010b2 <__ssvfiscanf_r+0x4a>
 8001328:	466b      	mov	r3, sp
 800132a:	4622      	mov	r2, r4
 800132c:	a941      	add	r1, sp, #260	@ 0x104
 800132e:	4630      	mov	r0, r6
 8001330:	f3af 8000 	nop.w
 8001334:	e7a0      	b.n	8001278 <__ssvfiscanf_r+0x210>
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	065b      	lsls	r3, r3, #25
 800133a:	f53f af71 	bmi.w	8001220 <__ssvfiscanf_r+0x1b8>
 800133e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8001342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001346:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8001348:	e7f9      	b.n	800133e <__ssvfiscanf_r+0x2d6>
 800134a:	bf00      	nop
 800134c:	00000000 	.word	0x00000000

08001350 <_printf_common>:
 8001350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001354:	4616      	mov	r6, r2
 8001356:	4698      	mov	r8, r3
 8001358:	688a      	ldr	r2, [r1, #8]
 800135a:	690b      	ldr	r3, [r1, #16]
 800135c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001360:	4293      	cmp	r3, r2
 8001362:	bfb8      	it	lt
 8001364:	4613      	movlt	r3, r2
 8001366:	6033      	str	r3, [r6, #0]
 8001368:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800136c:	4607      	mov	r7, r0
 800136e:	460c      	mov	r4, r1
 8001370:	b10a      	cbz	r2, 8001376 <_printf_common+0x26>
 8001372:	3301      	adds	r3, #1
 8001374:	6033      	str	r3, [r6, #0]
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	0699      	lsls	r1, r3, #26
 800137a:	bf42      	ittt	mi
 800137c:	6833      	ldrmi	r3, [r6, #0]
 800137e:	3302      	addmi	r3, #2
 8001380:	6033      	strmi	r3, [r6, #0]
 8001382:	6825      	ldr	r5, [r4, #0]
 8001384:	f015 0506 	ands.w	r5, r5, #6
 8001388:	d106      	bne.n	8001398 <_printf_common+0x48>
 800138a:	f104 0a19 	add.w	sl, r4, #25
 800138e:	68e3      	ldr	r3, [r4, #12]
 8001390:	6832      	ldr	r2, [r6, #0]
 8001392:	1a9b      	subs	r3, r3, r2
 8001394:	42ab      	cmp	r3, r5
 8001396:	dc26      	bgt.n	80013e6 <_printf_common+0x96>
 8001398:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800139c:	6822      	ldr	r2, [r4, #0]
 800139e:	3b00      	subs	r3, #0
 80013a0:	bf18      	it	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	0692      	lsls	r2, r2, #26
 80013a6:	d42b      	bmi.n	8001400 <_printf_common+0xb0>
 80013a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013ac:	4641      	mov	r1, r8
 80013ae:	4638      	mov	r0, r7
 80013b0:	47c8      	blx	r9
 80013b2:	3001      	adds	r0, #1
 80013b4:	d01e      	beq.n	80013f4 <_printf_common+0xa4>
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	6922      	ldr	r2, [r4, #16]
 80013ba:	f003 0306 	and.w	r3, r3, #6
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf02      	ittt	eq
 80013c2:	68e5      	ldreq	r5, [r4, #12]
 80013c4:	6833      	ldreq	r3, [r6, #0]
 80013c6:	1aed      	subeq	r5, r5, r3
 80013c8:	68a3      	ldr	r3, [r4, #8]
 80013ca:	bf0c      	ite	eq
 80013cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013d0:	2500      	movne	r5, #0
 80013d2:	4293      	cmp	r3, r2
 80013d4:	bfc4      	itt	gt
 80013d6:	1a9b      	subgt	r3, r3, r2
 80013d8:	18ed      	addgt	r5, r5, r3
 80013da:	2600      	movs	r6, #0
 80013dc:	341a      	adds	r4, #26
 80013de:	42b5      	cmp	r5, r6
 80013e0:	d11a      	bne.n	8001418 <_printf_common+0xc8>
 80013e2:	2000      	movs	r0, #0
 80013e4:	e008      	b.n	80013f8 <_printf_common+0xa8>
 80013e6:	2301      	movs	r3, #1
 80013e8:	4652      	mov	r2, sl
 80013ea:	4641      	mov	r1, r8
 80013ec:	4638      	mov	r0, r7
 80013ee:	47c8      	blx	r9
 80013f0:	3001      	adds	r0, #1
 80013f2:	d103      	bne.n	80013fc <_printf_common+0xac>
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013fc:	3501      	adds	r5, #1
 80013fe:	e7c6      	b.n	800138e <_printf_common+0x3e>
 8001400:	18e1      	adds	r1, r4, r3
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	2030      	movs	r0, #48	@ 0x30
 8001406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800140a:	4422      	add	r2, r4
 800140c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001414:	3302      	adds	r3, #2
 8001416:	e7c7      	b.n	80013a8 <_printf_common+0x58>
 8001418:	2301      	movs	r3, #1
 800141a:	4622      	mov	r2, r4
 800141c:	4641      	mov	r1, r8
 800141e:	4638      	mov	r0, r7
 8001420:	47c8      	blx	r9
 8001422:	3001      	adds	r0, #1
 8001424:	d0e6      	beq.n	80013f4 <_printf_common+0xa4>
 8001426:	3601      	adds	r6, #1
 8001428:	e7d9      	b.n	80013de <_printf_common+0x8e>
	...

0800142c <_printf_i>:
 800142c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001430:	7e0f      	ldrb	r7, [r1, #24]
 8001432:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001434:	2f78      	cmp	r7, #120	@ 0x78
 8001436:	4691      	mov	r9, r2
 8001438:	4680      	mov	r8, r0
 800143a:	460c      	mov	r4, r1
 800143c:	469a      	mov	sl, r3
 800143e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001442:	d807      	bhi.n	8001454 <_printf_i+0x28>
 8001444:	2f62      	cmp	r7, #98	@ 0x62
 8001446:	d80a      	bhi.n	800145e <_printf_i+0x32>
 8001448:	2f00      	cmp	r7, #0
 800144a:	f000 80d2 	beq.w	80015f2 <_printf_i+0x1c6>
 800144e:	2f58      	cmp	r7, #88	@ 0x58
 8001450:	f000 80b9 	beq.w	80015c6 <_printf_i+0x19a>
 8001454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800145c:	e03a      	b.n	80014d4 <_printf_i+0xa8>
 800145e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001462:	2b15      	cmp	r3, #21
 8001464:	d8f6      	bhi.n	8001454 <_printf_i+0x28>
 8001466:	a101      	add	r1, pc, #4	@ (adr r1, 800146c <_printf_i+0x40>)
 8001468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800146c:	080014c5 	.word	0x080014c5
 8001470:	080014d9 	.word	0x080014d9
 8001474:	08001455 	.word	0x08001455
 8001478:	08001455 	.word	0x08001455
 800147c:	08001455 	.word	0x08001455
 8001480:	08001455 	.word	0x08001455
 8001484:	080014d9 	.word	0x080014d9
 8001488:	08001455 	.word	0x08001455
 800148c:	08001455 	.word	0x08001455
 8001490:	08001455 	.word	0x08001455
 8001494:	08001455 	.word	0x08001455
 8001498:	080015d9 	.word	0x080015d9
 800149c:	08001503 	.word	0x08001503
 80014a0:	08001593 	.word	0x08001593
 80014a4:	08001455 	.word	0x08001455
 80014a8:	08001455 	.word	0x08001455
 80014ac:	080015fb 	.word	0x080015fb
 80014b0:	08001455 	.word	0x08001455
 80014b4:	08001503 	.word	0x08001503
 80014b8:	08001455 	.word	0x08001455
 80014bc:	08001455 	.word	0x08001455
 80014c0:	0800159b 	.word	0x0800159b
 80014c4:	6833      	ldr	r3, [r6, #0]
 80014c6:	1d1a      	adds	r2, r3, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6032      	str	r2, [r6, #0]
 80014cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014d4:	2301      	movs	r3, #1
 80014d6:	e09d      	b.n	8001614 <_printf_i+0x1e8>
 80014d8:	6833      	ldr	r3, [r6, #0]
 80014da:	6820      	ldr	r0, [r4, #0]
 80014dc:	1d19      	adds	r1, r3, #4
 80014de:	6031      	str	r1, [r6, #0]
 80014e0:	0606      	lsls	r6, r0, #24
 80014e2:	d501      	bpl.n	80014e8 <_printf_i+0xbc>
 80014e4:	681d      	ldr	r5, [r3, #0]
 80014e6:	e003      	b.n	80014f0 <_printf_i+0xc4>
 80014e8:	0645      	lsls	r5, r0, #25
 80014ea:	d5fb      	bpl.n	80014e4 <_printf_i+0xb8>
 80014ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80014f0:	2d00      	cmp	r5, #0
 80014f2:	da03      	bge.n	80014fc <_printf_i+0xd0>
 80014f4:	232d      	movs	r3, #45	@ 0x2d
 80014f6:	426d      	negs	r5, r5
 80014f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014fc:	4859      	ldr	r0, [pc, #356]	@ (8001664 <_printf_i+0x238>)
 80014fe:	230a      	movs	r3, #10
 8001500:	e011      	b.n	8001526 <_printf_i+0xfa>
 8001502:	6821      	ldr	r1, [r4, #0]
 8001504:	6833      	ldr	r3, [r6, #0]
 8001506:	0608      	lsls	r0, r1, #24
 8001508:	f853 5b04 	ldr.w	r5, [r3], #4
 800150c:	d402      	bmi.n	8001514 <_printf_i+0xe8>
 800150e:	0649      	lsls	r1, r1, #25
 8001510:	bf48      	it	mi
 8001512:	b2ad      	uxthmi	r5, r5
 8001514:	2f6f      	cmp	r7, #111	@ 0x6f
 8001516:	4853      	ldr	r0, [pc, #332]	@ (8001664 <_printf_i+0x238>)
 8001518:	6033      	str	r3, [r6, #0]
 800151a:	bf14      	ite	ne
 800151c:	230a      	movne	r3, #10
 800151e:	2308      	moveq	r3, #8
 8001520:	2100      	movs	r1, #0
 8001522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001526:	6866      	ldr	r6, [r4, #4]
 8001528:	60a6      	str	r6, [r4, #8]
 800152a:	2e00      	cmp	r6, #0
 800152c:	bfa2      	ittt	ge
 800152e:	6821      	ldrge	r1, [r4, #0]
 8001530:	f021 0104 	bicge.w	r1, r1, #4
 8001534:	6021      	strge	r1, [r4, #0]
 8001536:	b90d      	cbnz	r5, 800153c <_printf_i+0x110>
 8001538:	2e00      	cmp	r6, #0
 800153a:	d04b      	beq.n	80015d4 <_printf_i+0x1a8>
 800153c:	4616      	mov	r6, r2
 800153e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001542:	fb03 5711 	mls	r7, r3, r1, r5
 8001546:	5dc7      	ldrb	r7, [r0, r7]
 8001548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800154c:	462f      	mov	r7, r5
 800154e:	42bb      	cmp	r3, r7
 8001550:	460d      	mov	r5, r1
 8001552:	d9f4      	bls.n	800153e <_printf_i+0x112>
 8001554:	2b08      	cmp	r3, #8
 8001556:	d10b      	bne.n	8001570 <_printf_i+0x144>
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	07df      	lsls	r7, r3, #31
 800155c:	d508      	bpl.n	8001570 <_printf_i+0x144>
 800155e:	6923      	ldr	r3, [r4, #16]
 8001560:	6861      	ldr	r1, [r4, #4]
 8001562:	4299      	cmp	r1, r3
 8001564:	bfde      	ittt	le
 8001566:	2330      	movle	r3, #48	@ 0x30
 8001568:	f806 3c01 	strble.w	r3, [r6, #-1]
 800156c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001570:	1b92      	subs	r2, r2, r6
 8001572:	6122      	str	r2, [r4, #16]
 8001574:	f8cd a000 	str.w	sl, [sp]
 8001578:	464b      	mov	r3, r9
 800157a:	aa03      	add	r2, sp, #12
 800157c:	4621      	mov	r1, r4
 800157e:	4640      	mov	r0, r8
 8001580:	f7ff fee6 	bl	8001350 <_printf_common>
 8001584:	3001      	adds	r0, #1
 8001586:	d14a      	bne.n	800161e <_printf_i+0x1f2>
 8001588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800158c:	b004      	add	sp, #16
 800158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	6023      	str	r3, [r4, #0]
 800159a:	4833      	ldr	r0, [pc, #204]	@ (8001668 <_printf_i+0x23c>)
 800159c:	2778      	movs	r7, #120	@ 0x78
 800159e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	6831      	ldr	r1, [r6, #0]
 80015a6:	061f      	lsls	r7, r3, #24
 80015a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80015ac:	d402      	bmi.n	80015b4 <_printf_i+0x188>
 80015ae:	065f      	lsls	r7, r3, #25
 80015b0:	bf48      	it	mi
 80015b2:	b2ad      	uxthmi	r5, r5
 80015b4:	6031      	str	r1, [r6, #0]
 80015b6:	07d9      	lsls	r1, r3, #31
 80015b8:	bf44      	itt	mi
 80015ba:	f043 0320 	orrmi.w	r3, r3, #32
 80015be:	6023      	strmi	r3, [r4, #0]
 80015c0:	b11d      	cbz	r5, 80015ca <_printf_i+0x19e>
 80015c2:	2310      	movs	r3, #16
 80015c4:	e7ac      	b.n	8001520 <_printf_i+0xf4>
 80015c6:	4827      	ldr	r0, [pc, #156]	@ (8001664 <_printf_i+0x238>)
 80015c8:	e7e9      	b.n	800159e <_printf_i+0x172>
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	f023 0320 	bic.w	r3, r3, #32
 80015d0:	6023      	str	r3, [r4, #0]
 80015d2:	e7f6      	b.n	80015c2 <_printf_i+0x196>
 80015d4:	4616      	mov	r6, r2
 80015d6:	e7bd      	b.n	8001554 <_printf_i+0x128>
 80015d8:	6833      	ldr	r3, [r6, #0]
 80015da:	6825      	ldr	r5, [r4, #0]
 80015dc:	6961      	ldr	r1, [r4, #20]
 80015de:	1d18      	adds	r0, r3, #4
 80015e0:	6030      	str	r0, [r6, #0]
 80015e2:	062e      	lsls	r6, r5, #24
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	d501      	bpl.n	80015ec <_printf_i+0x1c0>
 80015e8:	6019      	str	r1, [r3, #0]
 80015ea:	e002      	b.n	80015f2 <_printf_i+0x1c6>
 80015ec:	0668      	lsls	r0, r5, #25
 80015ee:	d5fb      	bpl.n	80015e8 <_printf_i+0x1bc>
 80015f0:	8019      	strh	r1, [r3, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	6123      	str	r3, [r4, #16]
 80015f6:	4616      	mov	r6, r2
 80015f8:	e7bc      	b.n	8001574 <_printf_i+0x148>
 80015fa:	6833      	ldr	r3, [r6, #0]
 80015fc:	1d1a      	adds	r2, r3, #4
 80015fe:	6032      	str	r2, [r6, #0]
 8001600:	681e      	ldr	r6, [r3, #0]
 8001602:	6862      	ldr	r2, [r4, #4]
 8001604:	2100      	movs	r1, #0
 8001606:	4630      	mov	r0, r6
 8001608:	f7fe fdea 	bl	80001e0 <memchr>
 800160c:	b108      	cbz	r0, 8001612 <_printf_i+0x1e6>
 800160e:	1b80      	subs	r0, r0, r6
 8001610:	6060      	str	r0, [r4, #4]
 8001612:	6863      	ldr	r3, [r4, #4]
 8001614:	6123      	str	r3, [r4, #16]
 8001616:	2300      	movs	r3, #0
 8001618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800161c:	e7aa      	b.n	8001574 <_printf_i+0x148>
 800161e:	6923      	ldr	r3, [r4, #16]
 8001620:	4632      	mov	r2, r6
 8001622:	4649      	mov	r1, r9
 8001624:	4640      	mov	r0, r8
 8001626:	47d0      	blx	sl
 8001628:	3001      	adds	r0, #1
 800162a:	d0ad      	beq.n	8001588 <_printf_i+0x15c>
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	079b      	lsls	r3, r3, #30
 8001630:	d413      	bmi.n	800165a <_printf_i+0x22e>
 8001632:	68e0      	ldr	r0, [r4, #12]
 8001634:	9b03      	ldr	r3, [sp, #12]
 8001636:	4298      	cmp	r0, r3
 8001638:	bfb8      	it	lt
 800163a:	4618      	movlt	r0, r3
 800163c:	e7a6      	b.n	800158c <_printf_i+0x160>
 800163e:	2301      	movs	r3, #1
 8001640:	4632      	mov	r2, r6
 8001642:	4649      	mov	r1, r9
 8001644:	4640      	mov	r0, r8
 8001646:	47d0      	blx	sl
 8001648:	3001      	adds	r0, #1
 800164a:	d09d      	beq.n	8001588 <_printf_i+0x15c>
 800164c:	3501      	adds	r5, #1
 800164e:	68e3      	ldr	r3, [r4, #12]
 8001650:	9903      	ldr	r1, [sp, #12]
 8001652:	1a5b      	subs	r3, r3, r1
 8001654:	42ab      	cmp	r3, r5
 8001656:	dcf2      	bgt.n	800163e <_printf_i+0x212>
 8001658:	e7eb      	b.n	8001632 <_printf_i+0x206>
 800165a:	2500      	movs	r5, #0
 800165c:	f104 0619 	add.w	r6, r4, #25
 8001660:	e7f5      	b.n	800164e <_printf_i+0x222>
 8001662:	bf00      	nop
 8001664:	08001d45 	.word	0x08001d45
 8001668:	08001d56 	.word	0x08001d56

0800166c <_scanf_chars>:
 800166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001670:	4615      	mov	r5, r2
 8001672:	688a      	ldr	r2, [r1, #8]
 8001674:	4680      	mov	r8, r0
 8001676:	460c      	mov	r4, r1
 8001678:	b932      	cbnz	r2, 8001688 <_scanf_chars+0x1c>
 800167a:	698a      	ldr	r2, [r1, #24]
 800167c:	2a00      	cmp	r2, #0
 800167e:	bf14      	ite	ne
 8001680:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8001684:	2201      	moveq	r2, #1
 8001686:	608a      	str	r2, [r1, #8]
 8001688:	6822      	ldr	r2, [r4, #0]
 800168a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800171c <_scanf_chars+0xb0>
 800168e:	06d1      	lsls	r1, r2, #27
 8001690:	bf5f      	itttt	pl
 8001692:	681a      	ldrpl	r2, [r3, #0]
 8001694:	1d11      	addpl	r1, r2, #4
 8001696:	6019      	strpl	r1, [r3, #0]
 8001698:	6816      	ldrpl	r6, [r2, #0]
 800169a:	2700      	movs	r7, #0
 800169c:	69a0      	ldr	r0, [r4, #24]
 800169e:	b188      	cbz	r0, 80016c4 <_scanf_chars+0x58>
 80016a0:	2801      	cmp	r0, #1
 80016a2:	d107      	bne.n	80016b4 <_scanf_chars+0x48>
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	6963      	ldr	r3, [r4, #20]
 80016aa:	5c9b      	ldrb	r3, [r3, r2]
 80016ac:	b953      	cbnz	r3, 80016c4 <_scanf_chars+0x58>
 80016ae:	2f00      	cmp	r7, #0
 80016b0:	d031      	beq.n	8001716 <_scanf_chars+0xaa>
 80016b2:	e022      	b.n	80016fa <_scanf_chars+0x8e>
 80016b4:	2802      	cmp	r0, #2
 80016b6:	d120      	bne.n	80016fa <_scanf_chars+0x8e>
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80016c0:	071b      	lsls	r3, r3, #28
 80016c2:	d41a      	bmi.n	80016fa <_scanf_chars+0x8e>
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	06da      	lsls	r2, r3, #27
 80016c8:	bf5e      	ittt	pl
 80016ca:	682b      	ldrpl	r3, [r5, #0]
 80016cc:	781b      	ldrbpl	r3, [r3, #0]
 80016ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 80016d2:	682a      	ldr	r2, [r5, #0]
 80016d4:	686b      	ldr	r3, [r5, #4]
 80016d6:	3201      	adds	r2, #1
 80016d8:	602a      	str	r2, [r5, #0]
 80016da:	68a2      	ldr	r2, [r4, #8]
 80016dc:	3b01      	subs	r3, #1
 80016de:	3a01      	subs	r2, #1
 80016e0:	606b      	str	r3, [r5, #4]
 80016e2:	3701      	adds	r7, #1
 80016e4:	60a2      	str	r2, [r4, #8]
 80016e6:	b142      	cbz	r2, 80016fa <_scanf_chars+0x8e>
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	dcd7      	bgt.n	800169c <_scanf_chars+0x30>
 80016ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80016f0:	4629      	mov	r1, r5
 80016f2:	4640      	mov	r0, r8
 80016f4:	4798      	blx	r3
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d0d0      	beq.n	800169c <_scanf_chars+0x30>
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	f013 0310 	ands.w	r3, r3, #16
 8001700:	d105      	bne.n	800170e <_scanf_chars+0xa2>
 8001702:	68e2      	ldr	r2, [r4, #12]
 8001704:	3201      	adds	r2, #1
 8001706:	60e2      	str	r2, [r4, #12]
 8001708:	69a2      	ldr	r2, [r4, #24]
 800170a:	b102      	cbz	r2, 800170e <_scanf_chars+0xa2>
 800170c:	7033      	strb	r3, [r6, #0]
 800170e:	6923      	ldr	r3, [r4, #16]
 8001710:	443b      	add	r3, r7
 8001712:	6123      	str	r3, [r4, #16]
 8001714:	2000      	movs	r0, #0
 8001716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800171a:	bf00      	nop
 800171c:	08001d83 	.word	0x08001d83

08001720 <_scanf_i>:
 8001720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001724:	4698      	mov	r8, r3
 8001726:	4b74      	ldr	r3, [pc, #464]	@ (80018f8 <_scanf_i+0x1d8>)
 8001728:	460c      	mov	r4, r1
 800172a:	4682      	mov	sl, r0
 800172c:	4616      	mov	r6, r2
 800172e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001732:	b087      	sub	sp, #28
 8001734:	ab03      	add	r3, sp, #12
 8001736:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800173a:	4b70      	ldr	r3, [pc, #448]	@ (80018fc <_scanf_i+0x1dc>)
 800173c:	69a1      	ldr	r1, [r4, #24]
 800173e:	4a70      	ldr	r2, [pc, #448]	@ (8001900 <_scanf_i+0x1e0>)
 8001740:	2903      	cmp	r1, #3
 8001742:	bf08      	it	eq
 8001744:	461a      	moveq	r2, r3
 8001746:	68a3      	ldr	r3, [r4, #8]
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8001750:	bf88      	it	hi
 8001752:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8001756:	4627      	mov	r7, r4
 8001758:	bf82      	ittt	hi
 800175a:	eb03 0905 	addhi.w	r9, r3, r5
 800175e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8001762:	60a3      	strhi	r3, [r4, #8]
 8001764:	f857 3b1c 	ldr.w	r3, [r7], #28
 8001768:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800176c:	bf98      	it	ls
 800176e:	f04f 0900 	movls.w	r9, #0
 8001772:	6023      	str	r3, [r4, #0]
 8001774:	463d      	mov	r5, r7
 8001776:	f04f 0b00 	mov.w	fp, #0
 800177a:	6831      	ldr	r1, [r6, #0]
 800177c:	ab03      	add	r3, sp, #12
 800177e:	7809      	ldrb	r1, [r1, #0]
 8001780:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001784:	2202      	movs	r2, #2
 8001786:	f7fe fd2b 	bl	80001e0 <memchr>
 800178a:	b328      	cbz	r0, 80017d8 <_scanf_i+0xb8>
 800178c:	f1bb 0f01 	cmp.w	fp, #1
 8001790:	d159      	bne.n	8001846 <_scanf_i+0x126>
 8001792:	6862      	ldr	r2, [r4, #4]
 8001794:	b92a      	cbnz	r2, 80017a2 <_scanf_i+0x82>
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	2108      	movs	r1, #8
 800179a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179e:	6061      	str	r1, [r4, #4]
 80017a0:	6022      	str	r2, [r4, #0]
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80017a8:	6022      	str	r2, [r4, #0]
 80017aa:	68a2      	ldr	r2, [r4, #8]
 80017ac:	1e51      	subs	r1, r2, #1
 80017ae:	60a1      	str	r1, [r4, #8]
 80017b0:	b192      	cbz	r2, 80017d8 <_scanf_i+0xb8>
 80017b2:	6832      	ldr	r2, [r6, #0]
 80017b4:	1c51      	adds	r1, r2, #1
 80017b6:	6031      	str	r1, [r6, #0]
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	f805 2b01 	strb.w	r2, [r5], #1
 80017be:	6872      	ldr	r2, [r6, #4]
 80017c0:	3a01      	subs	r2, #1
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	6072      	str	r2, [r6, #4]
 80017c6:	dc07      	bgt.n	80017d8 <_scanf_i+0xb8>
 80017c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80017cc:	4631      	mov	r1, r6
 80017ce:	4650      	mov	r0, sl
 80017d0:	4790      	blx	r2
 80017d2:	2800      	cmp	r0, #0
 80017d4:	f040 8085 	bne.w	80018e2 <_scanf_i+0x1c2>
 80017d8:	f10b 0b01 	add.w	fp, fp, #1
 80017dc:	f1bb 0f03 	cmp.w	fp, #3
 80017e0:	d1cb      	bne.n	800177a <_scanf_i+0x5a>
 80017e2:	6863      	ldr	r3, [r4, #4]
 80017e4:	b90b      	cbnz	r3, 80017ea <_scanf_i+0xca>
 80017e6:	230a      	movs	r3, #10
 80017e8:	6063      	str	r3, [r4, #4]
 80017ea:	6863      	ldr	r3, [r4, #4]
 80017ec:	4945      	ldr	r1, [pc, #276]	@ (8001904 <_scanf_i+0x1e4>)
 80017ee:	6960      	ldr	r0, [r4, #20]
 80017f0:	1ac9      	subs	r1, r1, r3
 80017f2:	f000 f889 	bl	8001908 <__sccl>
 80017f6:	f04f 0b00 	mov.w	fp, #0
 80017fa:	68a3      	ldr	r3, [r4, #8]
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03d      	beq.n	800187e <_scanf_i+0x15e>
 8001802:	6831      	ldr	r1, [r6, #0]
 8001804:	6960      	ldr	r0, [r4, #20]
 8001806:	f891 c000 	ldrb.w	ip, [r1]
 800180a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800180e:	2800      	cmp	r0, #0
 8001810:	d035      	beq.n	800187e <_scanf_i+0x15e>
 8001812:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8001816:	d124      	bne.n	8001862 <_scanf_i+0x142>
 8001818:	0510      	lsls	r0, r2, #20
 800181a:	d522      	bpl.n	8001862 <_scanf_i+0x142>
 800181c:	f10b 0b01 	add.w	fp, fp, #1
 8001820:	f1b9 0f00 	cmp.w	r9, #0
 8001824:	d003      	beq.n	800182e <_scanf_i+0x10e>
 8001826:	3301      	adds	r3, #1
 8001828:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800182c:	60a3      	str	r3, [r4, #8]
 800182e:	6873      	ldr	r3, [r6, #4]
 8001830:	3b01      	subs	r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	6073      	str	r3, [r6, #4]
 8001836:	dd1b      	ble.n	8001870 <_scanf_i+0x150>
 8001838:	6833      	ldr	r3, [r6, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	6033      	str	r3, [r6, #0]
 800183e:	68a3      	ldr	r3, [r4, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60a3      	str	r3, [r4, #8]
 8001844:	e7d9      	b.n	80017fa <_scanf_i+0xda>
 8001846:	f1bb 0f02 	cmp.w	fp, #2
 800184a:	d1ae      	bne.n	80017aa <_scanf_i+0x8a>
 800184c:	6822      	ldr	r2, [r4, #0]
 800184e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8001852:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8001856:	d1bf      	bne.n	80017d8 <_scanf_i+0xb8>
 8001858:	2110      	movs	r1, #16
 800185a:	6061      	str	r1, [r4, #4]
 800185c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001860:	e7a2      	b.n	80017a8 <_scanf_i+0x88>
 8001862:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8001866:	6022      	str	r2, [r4, #0]
 8001868:	780b      	ldrb	r3, [r1, #0]
 800186a:	f805 3b01 	strb.w	r3, [r5], #1
 800186e:	e7de      	b.n	800182e <_scanf_i+0x10e>
 8001870:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001874:	4631      	mov	r1, r6
 8001876:	4650      	mov	r0, sl
 8001878:	4798      	blx	r3
 800187a:	2800      	cmp	r0, #0
 800187c:	d0df      	beq.n	800183e <_scanf_i+0x11e>
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	05d9      	lsls	r1, r3, #23
 8001882:	d50d      	bpl.n	80018a0 <_scanf_i+0x180>
 8001884:	42bd      	cmp	r5, r7
 8001886:	d909      	bls.n	800189c <_scanf_i+0x17c>
 8001888:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800188c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001890:	4632      	mov	r2, r6
 8001892:	4650      	mov	r0, sl
 8001894:	4798      	blx	r3
 8001896:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800189a:	464d      	mov	r5, r9
 800189c:	42bd      	cmp	r5, r7
 800189e:	d028      	beq.n	80018f2 <_scanf_i+0x1d2>
 80018a0:	6822      	ldr	r2, [r4, #0]
 80018a2:	f012 0210 	ands.w	r2, r2, #16
 80018a6:	d113      	bne.n	80018d0 <_scanf_i+0x1b0>
 80018a8:	702a      	strb	r2, [r5, #0]
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	9e01      	ldr	r6, [sp, #4]
 80018ae:	4639      	mov	r1, r7
 80018b0:	4650      	mov	r0, sl
 80018b2:	47b0      	blx	r6
 80018b4:	f8d8 3000 	ldr.w	r3, [r8]
 80018b8:	6821      	ldr	r1, [r4, #0]
 80018ba:	1d1a      	adds	r2, r3, #4
 80018bc:	f8c8 2000 	str.w	r2, [r8]
 80018c0:	f011 0f20 	tst.w	r1, #32
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	d00f      	beq.n	80018e8 <_scanf_i+0x1c8>
 80018c8:	6018      	str	r0, [r3, #0]
 80018ca:	68e3      	ldr	r3, [r4, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	60e3      	str	r3, [r4, #12]
 80018d0:	6923      	ldr	r3, [r4, #16]
 80018d2:	1bed      	subs	r5, r5, r7
 80018d4:	445d      	add	r5, fp
 80018d6:	442b      	add	r3, r5
 80018d8:	6123      	str	r3, [r4, #16]
 80018da:	2000      	movs	r0, #0
 80018dc:	b007      	add	sp, #28
 80018de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e2:	f04f 0b00 	mov.w	fp, #0
 80018e6:	e7ca      	b.n	800187e <_scanf_i+0x15e>
 80018e8:	07ca      	lsls	r2, r1, #31
 80018ea:	bf4c      	ite	mi
 80018ec:	8018      	strhmi	r0, [r3, #0]
 80018ee:	6018      	strpl	r0, [r3, #0]
 80018f0:	e7eb      	b.n	80018ca <_scanf_i+0x1aa>
 80018f2:	2001      	movs	r0, #1
 80018f4:	e7f2      	b.n	80018dc <_scanf_i+0x1bc>
 80018f6:	bf00      	nop
 80018f8:	08001d28 	.word	0x08001d28
 80018fc:	08001bb1 	.word	0x08001bb1
 8001900:	08001c91 	.word	0x08001c91
 8001904:	08001d77 	.word	0x08001d77

08001908 <__sccl>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	780b      	ldrb	r3, [r1, #0]
 800190c:	4604      	mov	r4, r0
 800190e:	2b5e      	cmp	r3, #94	@ 0x5e
 8001910:	bf0b      	itete	eq
 8001912:	784b      	ldrbeq	r3, [r1, #1]
 8001914:	1c4a      	addne	r2, r1, #1
 8001916:	1c8a      	addeq	r2, r1, #2
 8001918:	2100      	movne	r1, #0
 800191a:	bf08      	it	eq
 800191c:	2101      	moveq	r1, #1
 800191e:	3801      	subs	r0, #1
 8001920:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8001924:	f800 1f01 	strb.w	r1, [r0, #1]!
 8001928:	42a8      	cmp	r0, r5
 800192a:	d1fb      	bne.n	8001924 <__sccl+0x1c>
 800192c:	b90b      	cbnz	r3, 8001932 <__sccl+0x2a>
 800192e:	1e50      	subs	r0, r2, #1
 8001930:	bd70      	pop	{r4, r5, r6, pc}
 8001932:	f081 0101 	eor.w	r1, r1, #1
 8001936:	54e1      	strb	r1, [r4, r3]
 8001938:	4610      	mov	r0, r2
 800193a:	4602      	mov	r2, r0
 800193c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001940:	2d2d      	cmp	r5, #45	@ 0x2d
 8001942:	d005      	beq.n	8001950 <__sccl+0x48>
 8001944:	2d5d      	cmp	r5, #93	@ 0x5d
 8001946:	d016      	beq.n	8001976 <__sccl+0x6e>
 8001948:	2d00      	cmp	r5, #0
 800194a:	d0f1      	beq.n	8001930 <__sccl+0x28>
 800194c:	462b      	mov	r3, r5
 800194e:	e7f2      	b.n	8001936 <__sccl+0x2e>
 8001950:	7846      	ldrb	r6, [r0, #1]
 8001952:	2e5d      	cmp	r6, #93	@ 0x5d
 8001954:	d0fa      	beq.n	800194c <__sccl+0x44>
 8001956:	42b3      	cmp	r3, r6
 8001958:	dcf8      	bgt.n	800194c <__sccl+0x44>
 800195a:	3002      	adds	r0, #2
 800195c:	461a      	mov	r2, r3
 800195e:	3201      	adds	r2, #1
 8001960:	4296      	cmp	r6, r2
 8001962:	54a1      	strb	r1, [r4, r2]
 8001964:	dcfb      	bgt.n	800195e <__sccl+0x56>
 8001966:	1af2      	subs	r2, r6, r3
 8001968:	3a01      	subs	r2, #1
 800196a:	1c5d      	adds	r5, r3, #1
 800196c:	42b3      	cmp	r3, r6
 800196e:	bfa8      	it	ge
 8001970:	2200      	movge	r2, #0
 8001972:	18ab      	adds	r3, r5, r2
 8001974:	e7e1      	b.n	800193a <__sccl+0x32>
 8001976:	4610      	mov	r0, r2
 8001978:	e7da      	b.n	8001930 <__sccl+0x28>

0800197a <__submore>:
 800197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197e:	460c      	mov	r4, r1
 8001980:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001982:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001986:	4299      	cmp	r1, r3
 8001988:	d11d      	bne.n	80019c6 <__submore+0x4c>
 800198a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800198e:	f7ff f92f 	bl	8000bf0 <_malloc_r>
 8001992:	b918      	cbnz	r0, 800199c <__submore+0x22>
 8001994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800199c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80019a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80019a6:	6360      	str	r0, [r4, #52]	@ 0x34
 80019a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80019ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80019b0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80019b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80019b8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80019bc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80019c0:	6020      	str	r0, [r4, #0]
 80019c2:	2000      	movs	r0, #0
 80019c4:	e7e8      	b.n	8001998 <__submore+0x1e>
 80019c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80019c8:	0077      	lsls	r7, r6, #1
 80019ca:	463a      	mov	r2, r7
 80019cc:	f000 f848 	bl	8001a60 <_realloc_r>
 80019d0:	4605      	mov	r5, r0
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d0de      	beq.n	8001994 <__submore+0x1a>
 80019d6:	eb00 0806 	add.w	r8, r0, r6
 80019da:	4601      	mov	r1, r0
 80019dc:	4632      	mov	r2, r6
 80019de:	4640      	mov	r0, r8
 80019e0:	f000 f830 	bl	8001a44 <memcpy>
 80019e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80019e8:	f8c4 8000 	str.w	r8, [r4]
 80019ec:	e7e9      	b.n	80019c2 <__submore+0x48>

080019ee <memmove>:
 80019ee:	4288      	cmp	r0, r1
 80019f0:	b510      	push	{r4, lr}
 80019f2:	eb01 0402 	add.w	r4, r1, r2
 80019f6:	d902      	bls.n	80019fe <memmove+0x10>
 80019f8:	4284      	cmp	r4, r0
 80019fa:	4623      	mov	r3, r4
 80019fc:	d807      	bhi.n	8001a0e <memmove+0x20>
 80019fe:	1e43      	subs	r3, r0, #1
 8001a00:	42a1      	cmp	r1, r4
 8001a02:	d008      	beq.n	8001a16 <memmove+0x28>
 8001a04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a0c:	e7f8      	b.n	8001a00 <memmove+0x12>
 8001a0e:	4402      	add	r2, r0
 8001a10:	4601      	mov	r1, r0
 8001a12:	428a      	cmp	r2, r1
 8001a14:	d100      	bne.n	8001a18 <memmove+0x2a>
 8001a16:	bd10      	pop	{r4, pc}
 8001a18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a20:	e7f7      	b.n	8001a12 <memmove+0x24>
	...

08001a24 <_sbrk_r>:
 8001a24:	b538      	push	{r3, r4, r5, lr}
 8001a26:	4d06      	ldr	r5, [pc, #24]	@ (8001a40 <_sbrk_r+0x1c>)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	602b      	str	r3, [r5, #0]
 8001a30:	f7fe fe80 	bl	8000734 <_sbrk>
 8001a34:	1c43      	adds	r3, r0, #1
 8001a36:	d102      	bne.n	8001a3e <_sbrk_r+0x1a>
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	b103      	cbz	r3, 8001a3e <_sbrk_r+0x1a>
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
 8001a40:	200001ac 	.word	0x200001ac

08001a44 <memcpy>:
 8001a44:	440a      	add	r2, r1
 8001a46:	4291      	cmp	r1, r2
 8001a48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001a4c:	d100      	bne.n	8001a50 <memcpy+0xc>
 8001a4e:	4770      	bx	lr
 8001a50:	b510      	push	{r4, lr}
 8001a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a5a:	4291      	cmp	r1, r2
 8001a5c:	d1f9      	bne.n	8001a52 <memcpy+0xe>
 8001a5e:	bd10      	pop	{r4, pc}

08001a60 <_realloc_r>:
 8001a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a64:	4680      	mov	r8, r0
 8001a66:	4615      	mov	r5, r2
 8001a68:	460c      	mov	r4, r1
 8001a6a:	b921      	cbnz	r1, 8001a76 <_realloc_r+0x16>
 8001a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a70:	4611      	mov	r1, r2
 8001a72:	f7ff b8bd 	b.w	8000bf0 <_malloc_r>
 8001a76:	b92a      	cbnz	r2, 8001a84 <_realloc_r+0x24>
 8001a78:	f7ff f84e 	bl	8000b18 <_free_r>
 8001a7c:	2400      	movs	r4, #0
 8001a7e:	4620      	mov	r0, r4
 8001a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a84:	f000 f906 	bl	8001c94 <_malloc_usable_size_r>
 8001a88:	4285      	cmp	r5, r0
 8001a8a:	4606      	mov	r6, r0
 8001a8c:	d802      	bhi.n	8001a94 <_realloc_r+0x34>
 8001a8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001a92:	d8f4      	bhi.n	8001a7e <_realloc_r+0x1e>
 8001a94:	4629      	mov	r1, r5
 8001a96:	4640      	mov	r0, r8
 8001a98:	f7ff f8aa 	bl	8000bf0 <_malloc_r>
 8001a9c:	4607      	mov	r7, r0
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d0ec      	beq.n	8001a7c <_realloc_r+0x1c>
 8001aa2:	42b5      	cmp	r5, r6
 8001aa4:	462a      	mov	r2, r5
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	bf28      	it	cs
 8001aaa:	4632      	movcs	r2, r6
 8001aac:	f7ff ffca 	bl	8001a44 <memcpy>
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	4640      	mov	r0, r8
 8001ab4:	f7ff f830 	bl	8000b18 <_free_r>
 8001ab8:	463c      	mov	r4, r7
 8001aba:	e7e0      	b.n	8001a7e <_realloc_r+0x1e>

08001abc <_strtol_l.constprop.0>:
 8001abc:	2b24      	cmp	r3, #36	@ 0x24
 8001abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac2:	4686      	mov	lr, r0
 8001ac4:	4690      	mov	r8, r2
 8001ac6:	d801      	bhi.n	8001acc <_strtol_l.constprop.0+0x10>
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d106      	bne.n	8001ada <_strtol_l.constprop.0+0x1e>
 8001acc:	f7fe fff8 	bl	8000ac0 <__errno>
 8001ad0:	2316      	movs	r3, #22
 8001ad2:	6003      	str	r3, [r0, #0]
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ada:	4834      	ldr	r0, [pc, #208]	@ (8001bac <_strtol_l.constprop.0+0xf0>)
 8001adc:	460d      	mov	r5, r1
 8001ade:	462a      	mov	r2, r5
 8001ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001ae4:	5d06      	ldrb	r6, [r0, r4]
 8001ae6:	f016 0608 	ands.w	r6, r6, #8
 8001aea:	d1f8      	bne.n	8001ade <_strtol_l.constprop.0+0x22>
 8001aec:	2c2d      	cmp	r4, #45	@ 0x2d
 8001aee:	d12d      	bne.n	8001b4c <_strtol_l.constprop.0+0x90>
 8001af0:	782c      	ldrb	r4, [r5, #0]
 8001af2:	2601      	movs	r6, #1
 8001af4:	1c95      	adds	r5, r2, #2
 8001af6:	f033 0210 	bics.w	r2, r3, #16
 8001afa:	d109      	bne.n	8001b10 <_strtol_l.constprop.0+0x54>
 8001afc:	2c30      	cmp	r4, #48	@ 0x30
 8001afe:	d12a      	bne.n	8001b56 <_strtol_l.constprop.0+0x9a>
 8001b00:	782a      	ldrb	r2, [r5, #0]
 8001b02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001b06:	2a58      	cmp	r2, #88	@ 0x58
 8001b08:	d125      	bne.n	8001b56 <_strtol_l.constprop.0+0x9a>
 8001b0a:	786c      	ldrb	r4, [r5, #1]
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	3502      	adds	r5, #2
 8001b10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001b14:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001b18:	2200      	movs	r2, #0
 8001b1a:	fbbc f9f3 	udiv	r9, ip, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	fb03 ca19 	mls	sl, r3, r9, ip
 8001b24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001b28:	2f09      	cmp	r7, #9
 8001b2a:	d81b      	bhi.n	8001b64 <_strtol_l.constprop.0+0xa8>
 8001b2c:	463c      	mov	r4, r7
 8001b2e:	42a3      	cmp	r3, r4
 8001b30:	dd27      	ble.n	8001b82 <_strtol_l.constprop.0+0xc6>
 8001b32:	1c57      	adds	r7, r2, #1
 8001b34:	d007      	beq.n	8001b46 <_strtol_l.constprop.0+0x8a>
 8001b36:	4581      	cmp	r9, r0
 8001b38:	d320      	bcc.n	8001b7c <_strtol_l.constprop.0+0xc0>
 8001b3a:	d101      	bne.n	8001b40 <_strtol_l.constprop.0+0x84>
 8001b3c:	45a2      	cmp	sl, r4
 8001b3e:	db1d      	blt.n	8001b7c <_strtol_l.constprop.0+0xc0>
 8001b40:	fb00 4003 	mla	r0, r0, r3, r4
 8001b44:	2201      	movs	r2, #1
 8001b46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b4a:	e7eb      	b.n	8001b24 <_strtol_l.constprop.0+0x68>
 8001b4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8001b4e:	bf04      	itt	eq
 8001b50:	782c      	ldrbeq	r4, [r5, #0]
 8001b52:	1c95      	addeq	r5, r2, #2
 8001b54:	e7cf      	b.n	8001af6 <_strtol_l.constprop.0+0x3a>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1da      	bne.n	8001b10 <_strtol_l.constprop.0+0x54>
 8001b5a:	2c30      	cmp	r4, #48	@ 0x30
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2308      	moveq	r3, #8
 8001b60:	230a      	movne	r3, #10
 8001b62:	e7d5      	b.n	8001b10 <_strtol_l.constprop.0+0x54>
 8001b64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001b68:	2f19      	cmp	r7, #25
 8001b6a:	d801      	bhi.n	8001b70 <_strtol_l.constprop.0+0xb4>
 8001b6c:	3c37      	subs	r4, #55	@ 0x37
 8001b6e:	e7de      	b.n	8001b2e <_strtol_l.constprop.0+0x72>
 8001b70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001b74:	2f19      	cmp	r7, #25
 8001b76:	d804      	bhi.n	8001b82 <_strtol_l.constprop.0+0xc6>
 8001b78:	3c57      	subs	r4, #87	@ 0x57
 8001b7a:	e7d8      	b.n	8001b2e <_strtol_l.constprop.0+0x72>
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b80:	e7e1      	b.n	8001b46 <_strtol_l.constprop.0+0x8a>
 8001b82:	1c53      	adds	r3, r2, #1
 8001b84:	d108      	bne.n	8001b98 <_strtol_l.constprop.0+0xdc>
 8001b86:	2322      	movs	r3, #34	@ 0x22
 8001b88:	f8ce 3000 	str.w	r3, [lr]
 8001b8c:	4660      	mov	r0, ip
 8001b8e:	f1b8 0f00 	cmp.w	r8, #0
 8001b92:	d0a0      	beq.n	8001ad6 <_strtol_l.constprop.0+0x1a>
 8001b94:	1e69      	subs	r1, r5, #1
 8001b96:	e006      	b.n	8001ba6 <_strtol_l.constprop.0+0xea>
 8001b98:	b106      	cbz	r6, 8001b9c <_strtol_l.constprop.0+0xe0>
 8001b9a:	4240      	negs	r0, r0
 8001b9c:	f1b8 0f00 	cmp.w	r8, #0
 8001ba0:	d099      	beq.n	8001ad6 <_strtol_l.constprop.0+0x1a>
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d1f6      	bne.n	8001b94 <_strtol_l.constprop.0+0xd8>
 8001ba6:	f8c8 1000 	str.w	r1, [r8]
 8001baa:	e794      	b.n	8001ad6 <_strtol_l.constprop.0+0x1a>
 8001bac:	08001d83 	.word	0x08001d83

08001bb0 <_strtol_r>:
 8001bb0:	f7ff bf84 	b.w	8001abc <_strtol_l.constprop.0>

08001bb4 <_strtoul_l.constprop.0>:
 8001bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bb8:	4e34      	ldr	r6, [pc, #208]	@ (8001c8c <_strtoul_l.constprop.0+0xd8>)
 8001bba:	4686      	mov	lr, r0
 8001bbc:	460d      	mov	r5, r1
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001bc4:	5d37      	ldrb	r7, [r6, r4]
 8001bc6:	f017 0708 	ands.w	r7, r7, #8
 8001bca:	d1f8      	bne.n	8001bbe <_strtoul_l.constprop.0+0xa>
 8001bcc:	2c2d      	cmp	r4, #45	@ 0x2d
 8001bce:	d12f      	bne.n	8001c30 <_strtoul_l.constprop.0+0x7c>
 8001bd0:	782c      	ldrb	r4, [r5, #0]
 8001bd2:	2701      	movs	r7, #1
 8001bd4:	1c85      	adds	r5, r0, #2
 8001bd6:	f033 0010 	bics.w	r0, r3, #16
 8001bda:	d109      	bne.n	8001bf0 <_strtoul_l.constprop.0+0x3c>
 8001bdc:	2c30      	cmp	r4, #48	@ 0x30
 8001bde:	d12c      	bne.n	8001c3a <_strtoul_l.constprop.0+0x86>
 8001be0:	7828      	ldrb	r0, [r5, #0]
 8001be2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8001be6:	2858      	cmp	r0, #88	@ 0x58
 8001be8:	d127      	bne.n	8001c3a <_strtoul_l.constprop.0+0x86>
 8001bea:	786c      	ldrb	r4, [r5, #1]
 8001bec:	2310      	movs	r3, #16
 8001bee:	3502      	adds	r5, #2
 8001bf0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001bf4:	2600      	movs	r6, #0
 8001bf6:	fbb8 f8f3 	udiv	r8, r8, r3
 8001bfa:	fb03 f908 	mul.w	r9, r3, r8
 8001bfe:	ea6f 0909 	mvn.w	r9, r9
 8001c02:	4630      	mov	r0, r6
 8001c04:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8001c08:	f1bc 0f09 	cmp.w	ip, #9
 8001c0c:	d81c      	bhi.n	8001c48 <_strtoul_l.constprop.0+0x94>
 8001c0e:	4664      	mov	r4, ip
 8001c10:	42a3      	cmp	r3, r4
 8001c12:	dd2a      	ble.n	8001c6a <_strtoul_l.constprop.0+0xb6>
 8001c14:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001c18:	d007      	beq.n	8001c2a <_strtoul_l.constprop.0+0x76>
 8001c1a:	4580      	cmp	r8, r0
 8001c1c:	d322      	bcc.n	8001c64 <_strtoul_l.constprop.0+0xb0>
 8001c1e:	d101      	bne.n	8001c24 <_strtoul_l.constprop.0+0x70>
 8001c20:	45a1      	cmp	r9, r4
 8001c22:	db1f      	blt.n	8001c64 <_strtoul_l.constprop.0+0xb0>
 8001c24:	fb00 4003 	mla	r0, r0, r3, r4
 8001c28:	2601      	movs	r6, #1
 8001c2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001c2e:	e7e9      	b.n	8001c04 <_strtoul_l.constprop.0+0x50>
 8001c30:	2c2b      	cmp	r4, #43	@ 0x2b
 8001c32:	bf04      	itt	eq
 8001c34:	782c      	ldrbeq	r4, [r5, #0]
 8001c36:	1c85      	addeq	r5, r0, #2
 8001c38:	e7cd      	b.n	8001bd6 <_strtoul_l.constprop.0+0x22>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1d8      	bne.n	8001bf0 <_strtoul_l.constprop.0+0x3c>
 8001c3e:	2c30      	cmp	r4, #48	@ 0x30
 8001c40:	bf0c      	ite	eq
 8001c42:	2308      	moveq	r3, #8
 8001c44:	230a      	movne	r3, #10
 8001c46:	e7d3      	b.n	8001bf0 <_strtoul_l.constprop.0+0x3c>
 8001c48:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8001c4c:	f1bc 0f19 	cmp.w	ip, #25
 8001c50:	d801      	bhi.n	8001c56 <_strtoul_l.constprop.0+0xa2>
 8001c52:	3c37      	subs	r4, #55	@ 0x37
 8001c54:	e7dc      	b.n	8001c10 <_strtoul_l.constprop.0+0x5c>
 8001c56:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8001c5a:	f1bc 0f19 	cmp.w	ip, #25
 8001c5e:	d804      	bhi.n	8001c6a <_strtoul_l.constprop.0+0xb6>
 8001c60:	3c57      	subs	r4, #87	@ 0x57
 8001c62:	e7d5      	b.n	8001c10 <_strtoul_l.constprop.0+0x5c>
 8001c64:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001c68:	e7df      	b.n	8001c2a <_strtoul_l.constprop.0+0x76>
 8001c6a:	1c73      	adds	r3, r6, #1
 8001c6c:	d106      	bne.n	8001c7c <_strtoul_l.constprop.0+0xc8>
 8001c6e:	2322      	movs	r3, #34	@ 0x22
 8001c70:	f8ce 3000 	str.w	r3, [lr]
 8001c74:	4630      	mov	r0, r6
 8001c76:	b932      	cbnz	r2, 8001c86 <_strtoul_l.constprop.0+0xd2>
 8001c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c7c:	b107      	cbz	r7, 8001c80 <_strtoul_l.constprop.0+0xcc>
 8001c7e:	4240      	negs	r0, r0
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d0f9      	beq.n	8001c78 <_strtoul_l.constprop.0+0xc4>
 8001c84:	b106      	cbz	r6, 8001c88 <_strtoul_l.constprop.0+0xd4>
 8001c86:	1e69      	subs	r1, r5, #1
 8001c88:	6011      	str	r1, [r2, #0]
 8001c8a:	e7f5      	b.n	8001c78 <_strtoul_l.constprop.0+0xc4>
 8001c8c:	08001d83 	.word	0x08001d83

08001c90 <_strtoul_r>:
 8001c90:	f7ff bf90 	b.w	8001bb4 <_strtoul_l.constprop.0>

08001c94 <_malloc_usable_size_r>:
 8001c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c98:	1f18      	subs	r0, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bfbc      	itt	lt
 8001c9e:	580b      	ldrlt	r3, [r1, r0]
 8001ca0:	18c0      	addlt	r0, r0, r3
 8001ca2:	4770      	bx	lr

08001ca4 <_init>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	bf00      	nop
 8001ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001caa:	bc08      	pop	{r3}
 8001cac:	469e      	mov	lr, r3
 8001cae:	4770      	bx	lr

08001cb0 <_fini>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	bf00      	nop
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr
